// <auto-generated />
using System;
using HumanitarianAssistance.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace HumanitarianAssistance.Persistence.Migrations
{
    [DbContext(typeof(HumanitarianAssistanceDbContext))]
    [Migration("20190809131413_InitialMigration")]
    partial class InitialMigration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Accounting.AccountFilterType", b =>
                {
                    b.Property<int>("AccountFilterTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountFilterTypeName");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("AccountFilterTypeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("AccountFilterType");

                    b.HasData(
                        new
                        {
                            AccountFilterTypeId = 1,
                            AccountFilterTypeName = "Inventory Account",
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 956, DateTimeKind.Utc).AddTicks(3852),
                            IsDeleted = false
                        },
                        new
                        {
                            AccountFilterTypeId = 2,
                            AccountFilterTypeName = "Salary Account",
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 956, DateTimeKind.Utc).AddTicks(4583),
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Accounting.AccountHeadType", b =>
                {
                    b.Property<int>("AccountHeadTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountHeadTypeName");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool>("IsCreditBalancetype");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("AccountHeadTypeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("AccountHeadType");

                    b.HasData(
                        new
                        {
                            AccountHeadTypeId = 1,
                            AccountHeadTypeName = "Assets",
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 954, DateTimeKind.Utc).AddTicks(4520),
                            IsCreditBalancetype = false,
                            IsDeleted = false
                        },
                        new
                        {
                            AccountHeadTypeId = 2,
                            AccountHeadTypeName = "Liabilities",
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 954, DateTimeKind.Utc).AddTicks(5277),
                            IsCreditBalancetype = true,
                            IsDeleted = false
                        },
                        new
                        {
                            AccountHeadTypeId = 3,
                            AccountHeadTypeName = "Donors Equity",
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 954, DateTimeKind.Utc).AddTicks(5298),
                            IsCreditBalancetype = true,
                            IsDeleted = false
                        },
                        new
                        {
                            AccountHeadTypeId = 4,
                            AccountHeadTypeName = "Income",
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 954, DateTimeKind.Utc).AddTicks(5299),
                            IsCreditBalancetype = true,
                            IsDeleted = false
                        },
                        new
                        {
                            AccountHeadTypeId = 5,
                            AccountHeadTypeName = "Expense",
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 954, DateTimeKind.Utc).AddTicks(5300),
                            IsCreditBalancetype = false,
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Accounting.AccountLevel", b =>
                {
                    b.Property<int>("AccountLevelId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountLevelName")
                        .HasMaxLength(50);

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("AccountLevelId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("AccountLevel");

                    b.HasData(
                        new
                        {
                            AccountLevelId = 1,
                            AccountLevelName = "Main Level Accounts",
                            IsDeleted = false
                        },
                        new
                        {
                            AccountLevelId = 2,
                            AccountLevelName = "Control Level Accounts",
                            IsDeleted = false
                        },
                        new
                        {
                            AccountLevelId = 3,
                            AccountLevelName = "Sub Level Accounts",
                            IsDeleted = false
                        },
                        new
                        {
                            AccountLevelId = 4,
                            AccountLevelName = "Input Level Accounts",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Accounting.AccountType", b =>
                {
                    b.Property<int>("AccountTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AccountCategory");

                    b.Property<int>("AccountHeadTypeId");

                    b.Property<string>("AccountTypeName")
                        .HasMaxLength(100);

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("AccountTypeId");

                    b.HasIndex("AccountHeadTypeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("AccountType");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Accounting.ChartOfAccountNew", b =>
                {
                    b.Property<long>("ChartOfAccountNewId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AccountFilterTypeId");

                    b.Property<int>("AccountHeadTypeId");

                    b.Property<int>("AccountLevelId");

                    b.Property<string>("AccountName")
                        .HasMaxLength(100);

                    b.Property<int?>("AccountTypeId");

                    b.Property<string>("ChartOfAccountNewCode");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsCreditBalancetype");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long>("ParentID");

                    b.HasKey("ChartOfAccountNewId");

                    b.HasIndex("AccountFilterTypeId");

                    b.HasIndex("AccountLevelId");

                    b.HasIndex("AccountTypeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("ChartOfAccountNew");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Accounting.ExchangeRate", b =>
                {
                    b.Property<long>("ExchangeRateId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CurrencyCode");

                    b.Property<DateTime?>("Date");

                    b.Property<int?>("FromCurrency");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("OfficeCode");

                    b.Property<int?>("OfficeId");

                    b.Property<double?>("Rate");

                    b.Property<int?>("ToCurrency");

                    b.HasKey("ExchangeRateId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Date");

                    b.HasIndex("FromCurrency");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("OfficeId");

                    b.HasIndex("ToCurrency");

                    b.ToTable("ExchangeRates");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Accounting.ExchangeRateDetail", b =>
                {
                    b.Property<int>("ExchangeRateId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<DateTime>("Date");

                    b.Property<int>("FromCurrency");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("OfficeId");

                    b.Property<decimal>("Rate");

                    b.Property<int>("ToCurrency");

                    b.HasKey("ExchangeRateId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("ExchangeRateDetail");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Accounting.ExchangeRateVerification", b =>
                {
                    b.Property<long>("ExRateVerificationId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<DateTime>("Date");

                    b.Property<bool?>("IsDeleted");

                    b.Property<bool>("IsVerified");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("ExRateVerificationId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("ExchangeRateVerifications");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Accounting.VoucherDetail", b =>
                {
                    b.Property<long>("VoucherNo")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BudgetLineId");

                    b.Property<string>("ChequeNo")
                        .HasMaxLength(10);

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CurrencyCode");

                    b.Property<int?>("CurrencyId");

                    b.Property<string>("Description");

                    b.Property<int?>("FinancialYearId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<bool>("IsExchangeGainLossVoucher");

                    b.Property<bool>("IsVoucherVerified");

                    b.Property<int?>("JournalCode");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("OfficeCode");

                    b.Property<int?>("OfficeId");

                    b.Property<long?>("ProjectId");

                    b.Property<string>("ReferenceNo")
                        .HasMaxLength(20);

                    b.Property<DateTime>("VoucherDate");

                    b.Property<string>("VoucherMode");

                    b.Property<string>("VoucherType");

                    b.Property<int?>("VoucherTypeId");

                    b.HasKey("VoucherNo");

                    b.HasIndex("BudgetLineId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("FinancialYearId");

                    b.HasIndex("JournalCode");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("OfficeId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("VoucherNo")
                        .IsUnique();

                    b.HasIndex("VoucherTypeId");

                    b.ToTable("VoucherDetail");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Accounting.VoucherDocumentDetail", b =>
                {
                    b.Property<long>("VoucherDocumentId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<long>("DocumentFileId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long>("VoucherNo");

                    b.HasKey("VoucherDocumentId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DocumentFileId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("VoucherNo");

                    b.ToTable("VoucherDocumentDetail");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Accounting.VoucherTransactions", b =>
                {
                    b.Property<long>("TransactionId")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("AFGAmount");

                    b.Property<double?>("Amount");

                    b.Property<string>("Area");

                    b.Property<long?>("BudgetLineId");

                    b.Property<long?>("ChartOfAccountNewId");

                    b.Property<string>("CostBook");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<double?>("Credit");

                    b.Property<long?>("CreditAccount");

                    b.Property<int?>("CurrencyId");

                    b.Property<double?>("Debit");

                    b.Property<long?>("DebitAccount");

                    b.Property<string>("Description");

                    b.Property<string>("Donor");

                    b.Property<double?>("EURAmount");

                    b.Property<int?>("FinancialYearId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("Job");

                    b.Property<long?>("JobId");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("OfficeId");

                    b.Property<double?>("PKRAmount");

                    b.Property<string>("Program");

                    b.Property<string>("Project");

                    b.Property<long?>("ProjectId");

                    b.Property<string>("Sector");

                    b.Property<DateTime?>("TransactionDate");

                    b.Property<double?>("USDAmount");

                    b.Property<long?>("VoucherNo");

                    b.HasKey("TransactionId");

                    b.HasIndex("BudgetLineId");

                    b.HasIndex("ChartOfAccountNewId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("JobId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("OfficeId");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TransactionId")
                        .IsUnique();

                    b.HasIndex("VoucherNo");

                    b.HasIndex("TransactionDate", "ChartOfAccountNewId");

                    b.ToTable("VoucherTransactions");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Accounting.VoucherType", b =>
                {
                    b.Property<int>("VoucherTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("VoucherTypeName")
                        .HasMaxLength(50);

                    b.HasKey("VoucherTypeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("VoucherType");

                    b.HasData(
                        new
                        {
                            VoucherTypeId = 1,
                            IsDeleted = false,
                            VoucherTypeName = "Adjustment"
                        },
                        new
                        {
                            VoucherTypeId = 2,
                            IsDeleted = false,
                            VoucherTypeName = "Journal"
                        });
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.ActivityMaster", b =>
                {
                    b.Property<int>("ActivityId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ActivityName");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Priority")
                        .HasMaxLength(20);

                    b.Property<string>("Status")
                        .HasMaxLength(50);

                    b.Property<int>("TaskId");

                    b.HasKey("ActivityId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("TaskId");

                    b.ToTable("ActivityMaster");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.AgreeDisagreePermission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Agree");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool>("Disagree");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("PageId");

                    b.Property<string>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("PageId");

                    b.ToTable("AgreeDisagreePermission");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.AppUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("LastName");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.ApplicationPages", b =>
                {
                    b.Property<int>("PageId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("ModuleId");

                    b.Property<string>("ModuleName");

                    b.Property<string>("PageName");

                    b.HasKey("PageId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("ApplicationPages");

                    b.HasData(
                        new
                        {
                            PageId = 1,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 956, DateTimeKind.Utc).AddTicks(9279),
                            IsDeleted = false,
                            ModuleId = 1,
                            ModuleName = "Users",
                            PageName = "Users"
                        },
                        new
                        {
                            PageId = 2,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(455),
                            IsDeleted = false,
                            ModuleId = 2,
                            ModuleName = "Code",
                            PageName = "ChartOfAccount"
                        },
                        new
                        {
                            PageId = 3,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(473),
                            IsDeleted = false,
                            ModuleId = 2,
                            ModuleName = "Code",
                            PageName = "JournalCodes"
                        },
                        new
                        {
                            PageId = 4,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(475),
                            IsDeleted = false,
                            ModuleId = 2,
                            ModuleName = "Code",
                            PageName = "CurrencyCodes"
                        },
                        new
                        {
                            PageId = 5,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(476),
                            IsDeleted = false,
                            ModuleId = 2,
                            ModuleName = "Code",
                            PageName = "OfficeCodes"
                        },
                        new
                        {
                            PageId = 6,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(477),
                            IsDeleted = false,
                            ModuleId = 2,
                            ModuleName = "Code",
                            PageName = "FinancialYear"
                        },
                        new
                        {
                            PageId = 7,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(478),
                            IsDeleted = false,
                            ModuleId = 2,
                            ModuleName = "Code",
                            PageName = "PensionRate"
                        },
                        new
                        {
                            PageId = 8,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(480),
                            IsDeleted = false,
                            ModuleId = 2,
                            ModuleName = "Code",
                            PageName = "EmployeeContract"
                        },
                        new
                        {
                            PageId = 9,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(480),
                            IsDeleted = false,
                            ModuleId = 2,
                            ModuleName = "Code",
                            PageName = "AppraisalQuestions"
                        },
                        new
                        {
                            PageId = 10,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(482),
                            IsDeleted = false,
                            ModuleId = 2,
                            ModuleName = "Code",
                            PageName = "TechnicalQuestions"
                        },
                        new
                        {
                            PageId = 11,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(483),
                            IsDeleted = false,
                            ModuleId = 2,
                            ModuleName = "Code",
                            PageName = "EmailSettings"
                        },
                        new
                        {
                            PageId = 12,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(484),
                            IsDeleted = false,
                            ModuleId = 2,
                            ModuleName = "Code",
                            PageName = "ExchangeRate"
                        },
                        new
                        {
                            PageId = 13,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(486),
                            IsDeleted = false,
                            ModuleId = 2,
                            ModuleName = "Code",
                            PageName = "LeaveReason"
                        },
                        new
                        {
                            PageId = 14,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(487),
                            IsDeleted = false,
                            ModuleId = 2,
                            ModuleName = "Code",
                            PageName = "Profession"
                        },
                        new
                        {
                            PageId = 15,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(488),
                            IsDeleted = false,
                            ModuleId = 2,
                            ModuleName = "Code",
                            PageName = "Department"
                        },
                        new
                        {
                            PageId = 16,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(488),
                            IsDeleted = false,
                            ModuleId = 2,
                            ModuleName = "Code",
                            PageName = "Qualification"
                        },
                        new
                        {
                            PageId = 17,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(490),
                            IsDeleted = false,
                            ModuleId = 2,
                            ModuleName = "Code",
                            PageName = "Designation"
                        },
                        new
                        {
                            PageId = 18,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(491),
                            IsDeleted = false,
                            ModuleId = 2,
                            ModuleName = "Code",
                            PageName = "JobGrade"
                        },
                        new
                        {
                            PageId = 19,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(492),
                            IsDeleted = false,
                            ModuleId = 2,
                            ModuleName = "Code",
                            PageName = "SalaryHead"
                        },
                        new
                        {
                            PageId = 20,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(493),
                            IsDeleted = false,
                            ModuleId = 2,
                            ModuleName = "Code",
                            PageName = "SalaryTaxReportContent"
                        },
                        new
                        {
                            PageId = 21,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(494),
                            IsDeleted = false,
                            ModuleId = 2,
                            ModuleName = "Code",
                            PageName = "SetPayrollAccount"
                        },
                        new
                        {
                            PageId = 22,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(495),
                            IsDeleted = true,
                            ModuleId = 3,
                            ModuleName = "Accounting",
                            PageName = "Vouchers"
                        },
                        new
                        {
                            PageId = 23,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(496),
                            IsDeleted = false,
                            ModuleId = 3,
                            ModuleName = "Accounting",
                            PageName = "Journal"
                        },
                        new
                        {
                            PageId = 24,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(497),
                            IsDeleted = false,
                            ModuleId = 3,
                            ModuleName = "Accounting",
                            PageName = "LedgerStatement"
                        },
                        new
                        {
                            PageId = 25,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(498),
                            IsDeleted = false,
                            ModuleId = 3,
                            ModuleName = "Accounting",
                            PageName = "BudgetBalance"
                        },
                        new
                        {
                            PageId = 26,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(500),
                            IsDeleted = false,
                            ModuleId = 3,
                            ModuleName = "Accounting",
                            PageName = "TrialBalance"
                        },
                        new
                        {
                            PageId = 27,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(500),
                            IsDeleted = false,
                            ModuleId = 3,
                            ModuleName = "Accounting",
                            PageName = "FinancialReport"
                        },
                        new
                        {
                            PageId = 28,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(501),
                            IsDeleted = true,
                            ModuleId = 3,
                            ModuleName = "Accounting",
                            PageName = "CategoryPopulator"
                        },
                        new
                        {
                            PageId = 29,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(502),
                            IsDeleted = false,
                            ModuleId = 3,
                            ModuleName = "Accounting",
                            PageName = "ExchangeGainLoss"
                        },
                        new
                        {
                            PageId = 30,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(503),
                            IsDeleted = false,
                            ModuleId = 3,
                            ModuleName = "Accounting",
                            PageName = "GainLossTransaction"
                        },
                        new
                        {
                            PageId = 31,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(504),
                            IsDeleted = false,
                            ModuleId = 3,
                            ModuleName = "Accounting",
                            PageName = "PensionPayments"
                        },
                        new
                        {
                            PageId = 32,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(505),
                            IsDeleted = false,
                            ModuleId = 4,
                            ModuleName = "HR",
                            PageName = "Employees"
                        },
                        new
                        {
                            PageId = 33,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(507),
                            IsDeleted = false,
                            ModuleId = 4,
                            ModuleName = "HR",
                            PageName = "PayrollDailyHours"
                        },
                        new
                        {
                            PageId = 34,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(508),
                            IsDeleted = false,
                            ModuleId = 4,
                            ModuleName = "HR",
                            PageName = "Holidays"
                        },
                        new
                        {
                            PageId = 35,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(509),
                            IsDeleted = false,
                            ModuleId = 4,
                            ModuleName = "HR",
                            PageName = "Attendance"
                        },
                        new
                        {
                            PageId = 36,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(510),
                            IsDeleted = false,
                            ModuleId = 4,
                            ModuleName = "HR",
                            PageName = "ApproveLeave"
                        },
                        new
                        {
                            PageId = 37,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(511),
                            IsDeleted = false,
                            ModuleId = 4,
                            ModuleName = "HR",
                            PageName = "MonthlyPayrollRegister"
                        },
                        new
                        {
                            PageId = 38,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(512),
                            IsDeleted = false,
                            ModuleId = 4,
                            ModuleName = "HR",
                            PageName = "Jobs"
                        },
                        new
                        {
                            PageId = 39,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(513),
                            IsDeleted = false,
                            ModuleId = 4,
                            ModuleName = "HR",
                            PageName = "Interview"
                        },
                        new
                        {
                            PageId = 40,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(514),
                            IsDeleted = false,
                            ModuleId = 4,
                            ModuleName = "HR",
                            PageName = "EmployeeAppraisal"
                        },
                        new
                        {
                            PageId = 41,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(515),
                            IsDeleted = false,
                            ModuleId = 4,
                            ModuleName = "HR",
                            PageName = "Advances"
                        },
                        new
                        {
                            PageId = 42,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(516),
                            IsDeleted = false,
                            ModuleId = 4,
                            ModuleName = "HR",
                            PageName = "Summary"
                        },
                        new
                        {
                            PageId = 43,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(535),
                            IsDeleted = false,
                            ModuleId = 5,
                            ModuleName = "Store",
                            PageName = "Categories"
                        },
                        new
                        {
                            PageId = 44,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(536),
                            IsDeleted = false,
                            ModuleId = 5,
                            ModuleName = "Store",
                            PageName = "StoreSourceCodes"
                        },
                        new
                        {
                            PageId = 45,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(537),
                            IsDeleted = false,
                            ModuleId = 5,
                            ModuleName = "Store",
                            PageName = "PaymentTypes"
                        },
                        new
                        {
                            PageId = 46,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(539),
                            IsDeleted = false,
                            ModuleId = 5,
                            ModuleName = "Store",
                            PageName = "Store"
                        },
                        new
                        {
                            PageId = 47,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(540),
                            IsDeleted = false,
                            ModuleId = 5,
                            ModuleName = "Store",
                            PageName = "ProcurementSummary"
                        },
                        new
                        {
                            PageId = 48,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(541),
                            IsDeleted = false,
                            ModuleId = 5,
                            ModuleName = "Store",
                            PageName = "DepreciationReport"
                        },
                        new
                        {
                            PageId = 49,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(542),
                            IsDeleted = false,
                            ModuleId = 6,
                            ModuleName = "Marketing",
                            PageName = "TimeCategory"
                        },
                        new
                        {
                            PageId = 50,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(543),
                            IsDeleted = false,
                            ModuleId = 6,
                            ModuleName = "Marketing",
                            PageName = "Quality"
                        },
                        new
                        {
                            PageId = 51,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(544),
                            IsDeleted = false,
                            ModuleId = 6,
                            ModuleName = "Marketing",
                            PageName = "Phase"
                        },
                        new
                        {
                            PageId = 52,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(546),
                            IsDeleted = false,
                            ModuleId = 6,
                            ModuleName = "Marketing",
                            PageName = "Nature"
                        },
                        new
                        {
                            PageId = 53,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(547),
                            IsDeleted = false,
                            ModuleId = 6,
                            ModuleName = "Marketing",
                            PageName = "Medium"
                        },
                        new
                        {
                            PageId = 54,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(548),
                            IsDeleted = false,
                            ModuleId = 6,
                            ModuleName = "Marketing",
                            PageName = "MediaCategory"
                        },
                        new
                        {
                            PageId = 55,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(549),
                            IsDeleted = false,
                            ModuleId = 6,
                            ModuleName = "Marketing",
                            PageName = "ActivityType"
                        },
                        new
                        {
                            PageId = 56,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(550),
                            IsDeleted = false,
                            ModuleId = 7,
                            ModuleName = "AccountingNew",
                            PageName = "Assets"
                        },
                        new
                        {
                            PageId = 57,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(551),
                            IsDeleted = false,
                            ModuleId = 7,
                            ModuleName = "AccountingNew",
                            PageName = "Liabilities"
                        },
                        new
                        {
                            PageId = 58,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(552),
                            IsDeleted = false,
                            ModuleId = 7,
                            ModuleName = "AccountingNew",
                            PageName = "Income"
                        },
                        new
                        {
                            PageId = 59,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(553),
                            IsDeleted = false,
                            ModuleId = 7,
                            ModuleName = "AccountingNew",
                            PageName = "Expense"
                        },
                        new
                        {
                            PageId = 60,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(554),
                            IsDeleted = false,
                            ModuleId = 7,
                            ModuleName = "AccountingNew",
                            PageName = "BalanceSheet"
                        },
                        new
                        {
                            PageId = 61,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(555),
                            IsDeleted = false,
                            ModuleId = 7,
                            ModuleName = "AccountingNew",
                            PageName = "IncomeExpenseReport"
                        },
                        new
                        {
                            PageId = 62,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(556),
                            IsDeleted = false,
                            ModuleId = 7,
                            ModuleName = "AccountingNew",
                            PageName = "Vouchers"
                        },
                        new
                        {
                            PageId = 63,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(557),
                            IsDeleted = false,
                            ModuleId = 6,
                            ModuleName = "Marketing",
                            PageName = "Clients"
                        },
                        new
                        {
                            PageId = 64,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(558),
                            IsDeleted = false,
                            ModuleId = 6,
                            ModuleName = "Marketing",
                            PageName = "UnitRates"
                        },
                        new
                        {
                            PageId = 65,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(559),
                            IsDeleted = false,
                            ModuleId = 6,
                            ModuleName = "Marketing",
                            PageName = "Jobs"
                        },
                        new
                        {
                            PageId = 66,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(560),
                            IsDeleted = false,
                            ModuleId = 6,
                            ModuleName = "Marketing",
                            PageName = "Contracts"
                        },
                        new
                        {
                            PageId = 67,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(561),
                            IsDeleted = false,
                            ModuleId = 8,
                            ModuleName = "Projects",
                            PageName = "MyProjects"
                        },
                        new
                        {
                            PageId = 68,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(562),
                            IsDeleted = false,
                            ModuleId = 8,
                            ModuleName = "Projects",
                            PageName = "Donors"
                        },
                        new
                        {
                            PageId = 69,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(563),
                            IsDeleted = false,
                            ModuleId = 8,
                            ModuleName = "Projects",
                            PageName = "ProjectDetails"
                        },
                        new
                        {
                            PageId = 70,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(564),
                            IsDeleted = false,
                            ModuleId = 8,
                            ModuleName = "Projects",
                            PageName = "Proposal"
                        },
                        new
                        {
                            PageId = 71,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(565),
                            IsDeleted = false,
                            ModuleId = 8,
                            ModuleName = "Projects",
                            PageName = "CriteriaEvaluation"
                        },
                        new
                        {
                            PageId = 72,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(566),
                            IsDeleted = false,
                            ModuleId = 6,
                            ModuleName = "Marketing",
                            PageName = "Producer"
                        },
                        new
                        {
                            PageId = 73,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(567),
                            IsDeleted = false,
                            ModuleId = 6,
                            ModuleName = "Marketing",
                            PageName = "Policy"
                        },
                        new
                        {
                            PageId = 74,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(568),
                            IsDeleted = false,
                            ModuleId = 8,
                            ModuleName = "Projects",
                            PageName = "ProjectJobs"
                        },
                        new
                        {
                            PageId = 75,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(569),
                            IsDeleted = false,
                            ModuleId = 8,
                            ModuleName = "Projects",
                            PageName = "ProjectActivities"
                        },
                        new
                        {
                            PageId = 76,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(571),
                            IsDeleted = false,
                            ModuleId = 6,
                            ModuleName = "Marketing",
                            PageName = "Channel"
                        },
                        new
                        {
                            PageId = 77,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(572),
                            IsDeleted = false,
                            ModuleId = 6,
                            ModuleName = "Marketing",
                            PageName = "Scheduler"
                        },
                        new
                        {
                            PageId = 78,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(573),
                            IsDeleted = false,
                            ModuleId = 8,
                            ModuleName = "Projects",
                            PageName = "ProjectDashboard"
                        },
                        new
                        {
                            PageId = 79,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(575),
                            IsDeleted = false,
                            ModuleId = 8,
                            ModuleName = "Projects",
                            PageName = "ProjectCashFlow"
                        },
                        new
                        {
                            PageId = 80,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(576),
                            IsDeleted = false,
                            ModuleId = 8,
                            ModuleName = "Projects",
                            PageName = "ProjectBudgetLine"
                        },
                        new
                        {
                            PageId = 81,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(576),
                            IsDeleted = false,
                            ModuleId = 8,
                            ModuleName = "Projects",
                            PageName = "BroadCastPolicy"
                        },
                        new
                        {
                            PageId = 82,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(577),
                            IsDeleted = false,
                            ModuleId = 8,
                            ModuleName = "Projects",
                            PageName = "ProposalReport"
                        },
                        new
                        {
                            PageId = 83,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(578),
                            IsDeleted = false,
                            ModuleId = 8,
                            ModuleName = "Projects",
                            PageName = "ProjectIndicators"
                        },
                        new
                        {
                            PageId = 84,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(579),
                            IsDeleted = false,
                            ModuleId = 8,
                            ModuleName = "Projects",
                            PageName = "ProjectPeople"
                        },
                        new
                        {
                            PageId = 85,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(580),
                            IsDeleted = false,
                            ModuleId = 7,
                            ModuleName = "AccountingNew",
                            PageName = "VoucherSummaryReport"
                        },
                        new
                        {
                            PageId = 86,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(581),
                            IsDeleted = false,
                            ModuleId = 8,
                            ModuleName = "Projects",
                            PageName = "HiringRequests"
                        },
                        new
                        {
                            PageId = 87,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(582),
                            IsDeleted = false,
                            ModuleId = 2,
                            ModuleName = "Code",
                            PageName = "PensionDebitAccount"
                        },
                        new
                        {
                            PageId = 88,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(583),
                            IsDeleted = false,
                            ModuleId = 2,
                            ModuleName = "Code",
                            PageName = "AttendanceGroupMaster"
                        });
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.ApproveRejectPermission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Approve");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("PageId");

                    b.Property<bool>("Reject");

                    b.Property<string>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("PageId");

                    b.ToTable("ApproveRejectPermission");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.AssignActivity", b =>
                {
                    b.Property<long>("AssignActivityId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ActivityId");

                    b.Property<DateTime?>("ActualEndDate");

                    b.Property<DateTime?>("ActualStartDate");

                    b.Property<string>("ApprovedStatus")
                        .HasMaxLength(30);

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<DateTime?>("PlannedEndDate");

                    b.Property<DateTime?>("PlannedStartDate");

                    b.Property<long>("ProjectId");

                    b.Property<string>("Status")
                        .HasMaxLength(20);

                    b.Property<int>("TaskId");

                    b.Property<string>("UserId");

                    b.HasKey("AssignActivityId");

                    b.HasIndex("ActivityId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TaskId");

                    b.HasIndex("UserId");

                    b.ToTable("AssignActivity");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.AssignActivityApproveBy", b =>
                {
                    b.Property<long>("AssignActivityApprovedById")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApprovedById");

                    b.Property<long>("AssignActivityId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<DateTime?>("Date");

                    b.Property<string>("Description");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Status")
                        .HasMaxLength(20);

                    b.HasKey("AssignActivityApprovedById");

                    b.HasIndex("ApprovedById");

                    b.HasIndex("AssignActivityId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("AssignActivityApproveBy");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.AssignActivityFeedback", b =>
                {
                    b.Property<long>("FeedbackId")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("AssignActivityId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Feedback");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("UserId");

                    b.HasKey("FeedbackId");

                    b.HasIndex("AssignActivityId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("UserId");

                    b.ToTable("AssignActivityFeedback");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.BudgetLineType", b =>
                {
                    b.Property<int>("BudgetLineTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BudgetLineTypeName")
                        .HasMaxLength(50);

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("BudgetLineTypeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("BudgetLineType");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.BudgetReceivable", b =>
                {
                    b.Property<long>("BudgetReceivalbeId")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Amount");

                    b.Property<long>("BudgetLineId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<DateTime>("ExpectedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long?>("ProjectId");

                    b.HasKey("BudgetReceivalbeId");

                    b.HasIndex("BudgetLineId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.ToTable("BudgetReceivable");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.BudgetReceivedAmount", b =>
                {
                    b.Property<long>("BudgetReceivedAmountId")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Amount");

                    b.Property<long>("BudgetReceivalbeId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long>("ReceiptId");

                    b.Property<DateTime>("ReceivedDate");

                    b.Property<string>("Remark");

                    b.HasKey("BudgetReceivedAmountId");

                    b.HasIndex("BudgetReceivalbeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("BudgetReceivedAmount");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.CodeType", b =>
                {
                    b.Property<int>("CodeTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CodeTypeName");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("CodeTypeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("CodeType");

                    b.HasData(
                        new
                        {
                            CodeTypeId = 1,
                            CodeTypeName = "Organizations",
                            IsDeleted = false
                        },
                        new
                        {
                            CodeTypeId = 2,
                            CodeTypeName = "Suppliers",
                            IsDeleted = false
                        },
                        new
                        {
                            CodeTypeId = 3,
                            CodeTypeName = "Repair Shops",
                            IsDeleted = false
                        },
                        new
                        {
                            CodeTypeId = 4,
                            CodeTypeName = "Individual/Others",
                            IsDeleted = false
                        },
                        new
                        {
                            CodeTypeId = 5,
                            CodeTypeName = "Locations/Stores",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.ContractTypeContent", b =>
                {
                    b.Property<int>("ContractTypeContentId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ContentDari");

                    b.Property<string>("ContentEnglish");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int>("EmployeeContractTypeId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("OfficeId");

                    b.HasKey("ContractTypeContentId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeContractTypeId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("ContractTypeContent");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.CountryDetails", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CountryName")
                        .HasMaxLength(50);

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("CountryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("CountryDetails");

                    b.HasData(
                        new
                        {
                            CountryId = 1,
                            CountryName = "Afghanistan",
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 954, DateTimeKind.Utc).AddTicks(9141),
                            IsDeleted = false
                        },
                        new
                        {
                            CountryId = 2,
                            CountryName = "United States",
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 954, DateTimeKind.Utc).AddTicks(9805),
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.CurrencyDetails", b =>
                {
                    b.Property<int>("CurrencyId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CurrencyCode")
                        .HasMaxLength(5);

                    b.Property<string>("CurrencyName")
                        .HasMaxLength(50);

                    b.Property<float?>("CurrencyRate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<bool?>("SalaryTaxFlag");

                    b.Property<bool?>("Status");

                    b.HasKey("CurrencyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("CurrencyDetails");

                    b.HasData(
                        new
                        {
                            CurrencyId = 1,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 954, DateTimeKind.Utc).AddTicks(1488),
                            CurrencyCode = "AFG",
                            CurrencyName = "Afghanistan",
                            IsDeleted = false,
                            SalaryTaxFlag = true,
                            Status = false
                        },
                        new
                        {
                            CurrencyId = 2,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 954, DateTimeKind.Utc).AddTicks(2400),
                            CurrencyCode = "EUR",
                            CurrencyName = "European Curency",
                            IsDeleted = false,
                            SalaryTaxFlag = false,
                            Status = false
                        },
                        new
                        {
                            CurrencyId = 3,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 954, DateTimeKind.Utc).AddTicks(2416),
                            CurrencyCode = "PKR",
                            CurrencyName = "Pakistani Rupees",
                            IsDeleted = false,
                            SalaryTaxFlag = false,
                            Status = true
                        },
                        new
                        {
                            CurrencyId = 4,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 954, DateTimeKind.Utc).AddTicks(2417),
                            CurrencyCode = "USD",
                            CurrencyName = "US Dollars",
                            IsDeleted = false,
                            SalaryTaxFlag = false,
                            Status = false
                        });
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Department", b =>
                {
                    b.Property<int>("DepartmentId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("DepartmentName");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("OfficeCode");

                    b.Property<int?>("OfficeId");

                    b.HasKey("DepartmentId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("OfficeId");

                    b.ToTable("Department");

                    b.HasData(
                        new
                        {
                            DepartmentId = 1,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(6344),
                            DepartmentName = "Administration",
                            IsDeleted = false,
                            OfficeId = 1
                        });
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.DesignationDetail", b =>
                {
                    b.Property<int>("DesignationId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Designation")
                        .HasMaxLength(100);

                    b.Property<string>("DesignationDari");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("DesignationId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("DesignationDetail");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.DistrictDetail", b =>
                {
                    b.Property<long>("DistrictID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("District")
                        .HasMaxLength(50);

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("ProvinceID");

                    b.HasKey("DistrictID");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("DistrictDetail");

                    b.HasData(
                        new
                        {
                            DistrictID = 1L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(1464),
                            District = "Jawand",
                            IsDeleted = false,
                            ProvinceID = 1
                        },
                        new
                        {
                            DistrictID = 2L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2225),
                            District = "Muqur",
                            IsDeleted = false,
                            ProvinceID = 1
                        },
                        new
                        {
                            DistrictID = 3L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2241),
                            District = "Qadis",
                            IsDeleted = false,
                            ProvinceID = 1
                        },
                        new
                        {
                            DistrictID = 4L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2242),
                            District = "Baghlani Jadid",
                            IsDeleted = false,
                            ProvinceID = 2
                        },
                        new
                        {
                            DistrictID = 5L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2244),
                            District = "Dahana i Ghuri",
                            IsDeleted = false,
                            ProvinceID = 2
                        },
                        new
                        {
                            DistrictID = 6L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2245),
                            District = "Chahar Bolak",
                            IsDeleted = false,
                            ProvinceID = 3
                        },
                        new
                        {
                            DistrictID = 7L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2246),
                            District = "Chahar Kint",
                            IsDeleted = false,
                            ProvinceID = 3
                        },
                        new
                        {
                            DistrictID = 8L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2247),
                            District = "Panjab",
                            IsDeleted = false,
                            ProvinceID = 4
                        },
                        new
                        {
                            DistrictID = 9L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2248),
                            District = "Shibar",
                            IsDeleted = false,
                            ProvinceID = 4
                        },
                        new
                        {
                            DistrictID = 10L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2249),
                            District = "Bamyan",
                            IsDeleted = false,
                            ProvinceID = 4
                        },
                        new
                        {
                            DistrictID = 11L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2251),
                            District = "Gizab",
                            IsDeleted = false,
                            ProvinceID = 5
                        },
                        new
                        {
                            DistrictID = 12L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2252),
                            District = "Bala Buluk",
                            IsDeleted = false,
                            ProvinceID = 6
                        },
                        new
                        {
                            DistrictID = 13L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2253),
                            District = "Bakwa",
                            IsDeleted = false,
                            ProvinceID = 6
                        },
                        new
                        {
                            DistrictID = 14L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2256),
                            District = "Andkhoy",
                            IsDeleted = false,
                            ProvinceID = 7
                        },
                        new
                        {
                            DistrictID = 15L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2257),
                            District = "Almar",
                            IsDeleted = false,
                            ProvinceID = 7
                        },
                        new
                        {
                            DistrictID = 16L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2258),
                            District = "Bilchiragh",
                            IsDeleted = false,
                            ProvinceID = 7
                        },
                        new
                        {
                            DistrictID = 17L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2259),
                            District = "Ajristan",
                            IsDeleted = false,
                            ProvinceID = 8
                        },
                        new
                        {
                            DistrictID = 18L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2260),
                            District = "Andar",
                            IsDeleted = false,
                            ProvinceID = 8
                        },
                        new
                        {
                            DistrictID = 19L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2261),
                            District = "Shahrak",
                            IsDeleted = false,
                            ProvinceID = 9
                        },
                        new
                        {
                            DistrictID = 20L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2262),
                            District = "Tulak",
                            IsDeleted = false,
                            ProvinceID = 9
                        },
                        new
                        {
                            DistrictID = 21L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2263),
                            District = "Baghran",
                            IsDeleted = false,
                            ProvinceID = 10
                        },
                        new
                        {
                            DistrictID = 22L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2264),
                            District = "Garmsir",
                            IsDeleted = false,
                            ProvinceID = 10
                        },
                        new
                        {
                            DistrictID = 23L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2265),
                            District = "Chishti Sharif",
                            IsDeleted = false,
                            ProvinceID = 11
                        },
                        new
                        {
                            DistrictID = 24L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2266),
                            District = "Aqcha",
                            IsDeleted = false,
                            ProvinceID = 12
                        },
                        new
                        {
                            DistrictID = 25L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2267),
                            District = "Fayzabad",
                            IsDeleted = false,
                            ProvinceID = 12
                        },
                        new
                        {
                            DistrictID = 26L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2268),
                            District = "GuzDarzabara",
                            IsDeleted = false,
                            ProvinceID = 12
                        },
                        new
                        {
                            DistrictID = 27L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2269),
                            District = "Chahar Asyab",
                            IsDeleted = false,
                            ProvinceID = 13
                        },
                        new
                        {
                            DistrictID = 28L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2271),
                            District = "Deh Sabz",
                            IsDeleted = false,
                            ProvinceID = 13
                        },
                        new
                        {
                            DistrictID = 29L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2272),
                            District = "Bagrami",
                            IsDeleted = false,
                            ProvinceID = 13
                        },
                        new
                        {
                            DistrictID = 30L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2273),
                            District = "Daman",
                            IsDeleted = false,
                            ProvinceID = 14
                        },
                        new
                        {
                            DistrictID = 31L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2274),
                            District = "Ghorak",
                            IsDeleted = false,
                            ProvinceID = 14
                        },
                        new
                        {
                            DistrictID = 32L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2275),
                            District = "Alasay",
                            IsDeleted = false,
                            ProvinceID = 15
                        },
                        new
                        {
                            DistrictID = 33L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2276),
                            District = "Bak",
                            IsDeleted = false,
                            ProvinceID = 16
                        },
                        new
                        {
                            DistrictID = 34L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2278),
                            District = "Gurbuz",
                            IsDeleted = false,
                            ProvinceID = 16
                        },
                        new
                        {
                            DistrictID = 35L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2279),
                            District = "Asadabad",
                            IsDeleted = false,
                            ProvinceID = 17
                        },
                        new
                        {
                            DistrictID = 36L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2282),
                            District = "Bar Kunar",
                            IsDeleted = false,
                            ProvinceID = 17
                        },
                        new
                        {
                            DistrictID = 37L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2283),
                            District = "Ali Abad",
                            IsDeleted = false,
                            ProvinceID = 18
                        },
                        new
                        {
                            DistrictID = 38L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2284),
                            District = "Archi",
                            IsDeleted = false,
                            ProvinceID = 18
                        },
                        new
                        {
                            DistrictID = 39L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2285),
                            District = "Alingar",
                            IsDeleted = false,
                            ProvinceID = 19
                        },
                        new
                        {
                            DistrictID = 40L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2286),
                            District = "Alishing",
                            IsDeleted = false,
                            ProvinceID = 19
                        },
                        new
                        {
                            DistrictID = 41L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2287),
                            District = "Baraki Barak",
                            IsDeleted = false,
                            ProvinceID = 20
                        },
                        new
                        {
                            DistrictID = 42L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2288),
                            District = "Charkh",
                            IsDeleted = false,
                            ProvinceID = 20
                        },
                        new
                        {
                            DistrictID = 43L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2289),
                            District = "Maidan Wardak",
                            IsDeleted = false,
                            ProvinceID = 21
                        },
                        new
                        {
                            DistrictID = 44L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2291),
                            District = "Achin",
                            IsDeleted = false,
                            ProvinceID = 22
                        },
                        new
                        {
                            DistrictID = 45L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2292),
                            District = "Bati Kot",
                            IsDeleted = false,
                            ProvinceID = 22
                        },
                        new
                        {
                            DistrictID = 46L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2293),
                            District = "Kang",
                            IsDeleted = false,
                            ProvinceID = 23
                        },
                        new
                        {
                            DistrictID = 47L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2294),
                            District = "Chakhansur",
                            IsDeleted = false,
                            ProvinceID = 23
                        },
                        new
                        {
                            DistrictID = 48L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2432),
                            District = "Kamdesh",
                            IsDeleted = false,
                            ProvinceID = 24
                        },
                        new
                        {
                            DistrictID = 49L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2434),
                            District = "Mandol",
                            IsDeleted = false,
                            ProvinceID = 24
                        },
                        new
                        {
                            DistrictID = 50L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2434),
                            District = "Gardez",
                            IsDeleted = false,
                            ProvinceID = 25
                        },
                        new
                        {
                            DistrictID = 51L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2435),
                            District = "Jaji",
                            IsDeleted = false,
                            ProvinceID = 25
                        },
                        new
                        {
                            DistrictID = 52L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2436),
                            District = "Zurmat",
                            IsDeleted = false,
                            ProvinceID = 25
                        },
                        new
                        {
                            DistrictID = 53L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2438),
                            District = "Wuza Zadran",
                            IsDeleted = false,
                            ProvinceID = 25
                        },
                        new
                        {
                            DistrictID = 54L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2438),
                            District = "Dila",
                            IsDeleted = false,
                            ProvinceID = 26
                        },
                        new
                        {
                            DistrictID = 55L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2439),
                            District = "Barmal",
                            IsDeleted = false,
                            ProvinceID = 26
                        },
                        new
                        {
                            DistrictID = 56L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2440),
                            District = "Kal",
                            IsDeleted = false,
                            ProvinceID = 26
                        },
                        new
                        {
                            DistrictID = 57L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2441),
                            District = "Chang",
                            IsDeleted = false,
                            ProvinceID = 26
                        },
                        new
                        {
                            DistrictID = 58L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2441),
                            District = "Anaba",
                            IsDeleted = false,
                            ProvinceID = 27
                        },
                        new
                        {
                            DistrictID = 59L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2442),
                            District = "Bagram",
                            IsDeleted = false,
                            ProvinceID = 28
                        },
                        new
                        {
                            DistrictID = 60L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2443),
                            District = "Chaharikar",
                            IsDeleted = false,
                            ProvinceID = 28
                        },
                        new
                        {
                            DistrictID = 61L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2443),
                            District = "Jabal Saraj",
                            IsDeleted = false,
                            ProvinceID = 28
                        },
                        new
                        {
                            DistrictID = 62L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2444),
                            District = "Kohi Safi",
                            IsDeleted = false,
                            ProvinceID = 28
                        },
                        new
                        {
                            DistrictID = 63L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2445),
                            District = "Salang",
                            IsDeleted = false,
                            ProvinceID = 28
                        },
                        new
                        {
                            DistrictID = 64L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2446),
                            District = "Aybak",
                            IsDeleted = false,
                            ProvinceID = 29
                        },
                        new
                        {
                            DistrictID = 65L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2446),
                            District = "Balkhab",
                            IsDeleted = false,
                            ProvinceID = 30
                        },
                        new
                        {
                            DistrictID = 66L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2448),
                            District = "Bangi",
                            IsDeleted = false,
                            ProvinceID = 31
                        },
                        new
                        {
                            DistrictID = 67L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2448),
                            District = "Uakhar",
                            IsDeleted = false,
                            ProvinceID = 32
                        },
                        new
                        {
                            DistrictID = 68L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2449),
                            District = "Argahandab",
                            IsDeleted = false,
                            ProvinceID = 33
                        },
                        new
                        {
                            DistrictID = 69L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2450),
                            District = "Atghar",
                            IsDeleted = false,
                            ProvinceID = 33
                        },
                        new
                        {
                            DistrictID = 70L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2451),
                            District = "Alabama",
                            IsDeleted = false,
                            ProvinceID = 34
                        },
                        new
                        {
                            DistrictID = 71L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2452),
                            District = "Arizona",
                            IsDeleted = false,
                            ProvinceID = 35
                        },
                        new
                        {
                            DistrictID = 72L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2452),
                            District = "Jurors",
                            IsDeleted = false,
                            ProvinceID = 35
                        },
                        new
                        {
                            DistrictID = 73L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2453),
                            District = "Arona",
                            IsDeleted = false,
                            ProvinceID = 35
                        },
                        new
                        {
                            DistrictID = 74L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2454),
                            District = "Arkansas",
                            IsDeleted = false,
                            ProvinceID = 36
                        },
                        new
                        {
                            DistrictID = 75L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2455),
                            District = "California",
                            IsDeleted = false,
                            ProvinceID = 37
                        },
                        new
                        {
                            DistrictID = 76L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2455),
                            District = "Califor",
                            IsDeleted = false,
                            ProvinceID = 37
                        },
                        new
                        {
                            DistrictID = 77L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2456),
                            District = "Colorado",
                            IsDeleted = false,
                            ProvinceID = 38
                        },
                        new
                        {
                            DistrictID = 78L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2457),
                            District = "Connecticut",
                            IsDeleted = false,
                            ProvinceID = 39
                        },
                        new
                        {
                            DistrictID = 79L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2458),
                            District = "Aelaware",
                            IsDeleted = false,
                            ProvinceID = 40
                        },
                        new
                        {
                            DistrictID = 80L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2459),
                            District = "Florida",
                            IsDeleted = false,
                            ProvinceID = 41
                        },
                        new
                        {
                            DistrictID = 81L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2460),
                            District = "Georia",
                            IsDeleted = false,
                            ProvinceID = 42
                        },
                        new
                        {
                            DistrictID = 82L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2460),
                            District = "Hawaii",
                            IsDeleted = false,
                            ProvinceID = 43
                        },
                        new
                        {
                            DistrictID = 83L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2461),
                            District = "Idaho",
                            IsDeleted = false,
                            ProvinceID = 44
                        },
                        new
                        {
                            DistrictID = 84L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2462),
                            District = "Illinois",
                            IsDeleted = false,
                            ProvinceID = 45
                        },
                        new
                        {
                            DistrictID = 85L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2463),
                            District = "Indiana",
                            IsDeleted = false,
                            ProvinceID = 46
                        },
                        new
                        {
                            DistrictID = 86L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2463),
                            District = "Undia",
                            IsDeleted = false,
                            ProvinceID = 46
                        },
                        new
                        {
                            DistrictID = 87L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2464),
                            District = "Iowa",
                            IsDeleted = false,
                            ProvinceID = 47
                        },
                        new
                        {
                            DistrictID = 88L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2465),
                            District = "Lansa",
                            IsDeleted = false,
                            ProvinceID = 48
                        },
                        new
                        {
                            DistrictID = 89L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2466),
                            District = "Kentucky",
                            IsDeleted = false,
                            ProvinceID = 49
                        },
                        new
                        {
                            DistrictID = 90L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2466),
                            District = "Louisiana",
                            IsDeleted = false,
                            ProvinceID = 50
                        },
                        new
                        {
                            DistrictID = 91L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2467),
                            District = "Maine",
                            IsDeleted = false,
                            ProvinceID = 51
                        },
                        new
                        {
                            DistrictID = 92L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2468),
                            District = "Maryland",
                            IsDeleted = false,
                            ProvinceID = 52
                        },
                        new
                        {
                            DistrictID = 93L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2469),
                            District = "Massachusetts",
                            IsDeleted = false,
                            ProvinceID = 53
                        },
                        new
                        {
                            DistrictID = 94L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2470),
                            District = "Michigan",
                            IsDeleted = false,
                            ProvinceID = 54
                        },
                        new
                        {
                            DistrictID = 95L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2471),
                            District = "Minnesota",
                            IsDeleted = false,
                            ProvinceID = 55
                        },
                        new
                        {
                            DistrictID = 96L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2472),
                            District = "Mississippi",
                            IsDeleted = false,
                            ProvinceID = 56
                        },
                        new
                        {
                            DistrictID = 97L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2472),
                            District = "Missouri",
                            IsDeleted = false,
                            ProvinceID = 57
                        },
                        new
                        {
                            DistrictID = 98L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2473),
                            District = "Montana",
                            IsDeleted = false,
                            ProvinceID = 58
                        },
                        new
                        {
                            DistrictID = 99L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2474),
                            District = "Nebraska",
                            IsDeleted = false,
                            ProvinceID = 59
                        },
                        new
                        {
                            DistrictID = 100L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2474),
                            District = "Yevada",
                            IsDeleted = false,
                            ProvinceID = 60
                        },
                        new
                        {
                            DistrictID = 101L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2475),
                            District = "New Hampshire",
                            IsDeleted = false,
                            ProvinceID = 61
                        },
                        new
                        {
                            DistrictID = 102L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2476),
                            District = "New Jersey",
                            IsDeleted = false,
                            ProvinceID = 62
                        },
                        new
                        {
                            DistrictID = 103L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2477),
                            District = "New Mexico",
                            IsDeleted = false,
                            ProvinceID = 63
                        },
                        new
                        {
                            DistrictID = 104L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2477),
                            District = "New York",
                            IsDeleted = false,
                            ProvinceID = 64
                        },
                        new
                        {
                            DistrictID = 105L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2479),
                            District = "North Carolina",
                            IsDeleted = false,
                            ProvinceID = 65
                        },
                        new
                        {
                            DistrictID = 106L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2480),
                            District = "North Dakota",
                            IsDeleted = false,
                            ProvinceID = 66
                        },
                        new
                        {
                            DistrictID = 107L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2481),
                            District = "Ohio",
                            IsDeleted = false,
                            ProvinceID = 67
                        },
                        new
                        {
                            DistrictID = 108L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2481),
                            District = "Oklahoma",
                            IsDeleted = false,
                            ProvinceID = 68
                        },
                        new
                        {
                            DistrictID = 109L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2483),
                            District = "Tregon",
                            IsDeleted = false,
                            ProvinceID = 69
                        },
                        new
                        {
                            DistrictID = 110L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2484),
                            District = "Pennsylvania",
                            IsDeleted = false,
                            ProvinceID = 70
                        },
                        new
                        {
                            DistrictID = 111L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2485),
                            District = "Rhode Island",
                            IsDeleted = false,
                            ProvinceID = 71
                        },
                        new
                        {
                            DistrictID = 112L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2485),
                            District = "South Carolina",
                            IsDeleted = false,
                            ProvinceID = 72
                        },
                        new
                        {
                            DistrictID = 113L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2486),
                            District = "South Dakota",
                            IsDeleted = false,
                            ProvinceID = 73
                        },
                        new
                        {
                            DistrictID = 114L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2487),
                            District = "Tennessee",
                            IsDeleted = false,
                            ProvinceID = 74
                        },
                        new
                        {
                            DistrictID = 115L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2487),
                            District = "Texas",
                            IsDeleted = false,
                            ProvinceID = 75
                        },
                        new
                        {
                            DistrictID = 116L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2488),
                            District = "Wtaha",
                            IsDeleted = false,
                            ProvinceID = 76
                        },
                        new
                        {
                            DistrictID = 117L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2489),
                            District = "Oermont",
                            IsDeleted = false,
                            ProvinceID = 77
                        },
                        new
                        {
                            DistrictID = 118L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2490),
                            District = "Virginia",
                            IsDeleted = false,
                            ProvinceID = 78
                        },
                        new
                        {
                            DistrictID = 119L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2490),
                            District = "Washinn",
                            IsDeleted = false,
                            ProvinceID = 79
                        },
                        new
                        {
                            DistrictID = 120L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2491),
                            District = "West Virginia",
                            IsDeleted = false,
                            ProvinceID = 80
                        },
                        new
                        {
                            DistrictID = 121L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2524),
                            District = "Nouit Vinia",
                            IsDeleted = false,
                            ProvinceID = 80
                        },
                        new
                        {
                            DistrictID = 122L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2525),
                            District = "Wisconsin",
                            IsDeleted = false,
                            ProvinceID = 81
                        },
                        new
                        {
                            DistrictID = 123L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 958, DateTimeKind.Utc).AddTicks(2526),
                            District = "Wyoming",
                            IsDeleted = false,
                            ProvinceID = 82
                        });
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.DocumentFileDetail", b =>
                {
                    b.Property<long>("DocumentFileId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("Active");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("ModuleId");

                    b.Property<string>("Name");

                    b.Property<int>("PageId");

                    b.Property<string>("RawFileMimeType");

                    b.Property<long>("RawFileSizeBytes");

                    b.Property<string>("StorageDirectoryPath");

                    b.HasKey("DocumentFileId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("DocumentFileDetail");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.DonorDetail", b =>
                {
                    b.Property<long>("DonorId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ContactDesignation");

                    b.Property<string>("ContactPerson");

                    b.Property<string>("ContactPersonCell");

                    b.Property<string>("ContactPersonEmail");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name");

                    b.HasKey("DonorId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("DonorDetail");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.EmailSettingDetail", b =>
                {
                    b.Property<long>("EmailId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("EmailTypeId");

                    b.Property<bool?>("EnableSSL");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("SenderEmail")
                        .HasMaxLength(100);

                    b.Property<string>("SenderPassword")
                        .HasMaxLength(100);

                    b.Property<int>("SmtpPort");

                    b.Property<string>("SmtpServer")
                        .HasMaxLength(100);

                    b.HasKey("EmailId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmailTypeId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("EmailSettingDetail");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.EmailType", b =>
                {
                    b.Property<int>("EmailTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("EmailTypeName")
                        .HasMaxLength(100);

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("EmailTypeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("EmailType");

                    b.HasData(
                        new
                        {
                            EmailTypeId = 1,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 954, DateTimeKind.Utc).AddTicks(7578),
                            EmailTypeName = "General",
                            IsDeleted = false
                        },
                        new
                        {
                            EmailTypeId = 2,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 954, DateTimeKind.Utc).AddTicks(8335),
                            EmailTypeName = "Bidding Panel",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.ErrorLog.Errorlog", b =>
                {
                    b.Property<long>("ExceptionId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("DataXml");

                    b.Property<string>("FileName");

                    b.Property<bool?>("IsActive");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("ModuleName");

                    b.Property<int?>("Section");

                    b.Property<int?>("Status");

                    b.Property<string>("UserName");

                    b.Property<string>("stackTrace");

                    b.HasKey("ExceptionId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Errorlog");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.FinancialYearDetail", b =>
                {
                    b.Property<int>("FinancialYearId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("FinancialYearName")
                        .HasMaxLength(50);

                    b.Property<bool>("IsDefault");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("FinancialYearId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("FinancialYearDetail");

                    b.HasData(
                        new
                        {
                            FinancialYearId = 1,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 957, DateTimeKind.Utc).AddTicks(1270),
                            EndDate = new DateTime(2019, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FinancialYearName = "2019 Financial Year",
                            IsDefault = true,
                            IsDeleted = false,
                            StartDate = new DateTime(2019, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.GainLossSelectedAccounts", b =>
                {
                    b.Property<int>("GainLossSelectedAccountId")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("ChartOfAccountNewId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("GainLossSelectedAccountId");

                    b.HasIndex("ChartOfAccountNewId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("GainLossSelectedAccounts");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.Advances", b =>
                {
                    b.Property<int>("AdvancesId")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("AdvanceAmount");

                    b.Property<DateTime>("AdvanceDate");

                    b.Property<DateTime>("AdvanceRecoveryDate");

                    b.Property<DateTime>("AppraisalApprovedDate");

                    b.Property<int>("ApprovedBy");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int>("CurrencyId");

                    b.Property<DateTime>("DeductedDate");

                    b.Property<string>("Description");

                    b.Property<string>("EmployeeCode");

                    b.Property<int>("EmployeeId");

                    b.Property<bool>("IsAdvanceRecovery");

                    b.Property<bool>("IsApproved");

                    b.Property<bool>("IsDeducted");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModeOfReturn");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("NumberOfInstallments");

                    b.Property<int>("OfficeId");

                    b.Property<double>("RecoveredAmount");

                    b.Property<double>("RequestAmount");

                    b.Property<long>("VoucherReferenceNo");

                    b.HasKey("AdvancesId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Advances");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.AnalyticalDetail", b =>
                {
                    b.Property<long>("AnalyticalId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Area")
                        .HasMaxLength(10);

                    b.Property<string>("Attachment")
                        .HasMaxLength(100);

                    b.Property<float?>("BLAmount");

                    b.Property<string>("BLCurrCode")
                        .HasMaxLength(5);

                    b.Property<byte>("BLType");

                    b.Property<string>("CostBook")
                        .HasMaxLength(10);

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("DonorCode")
                        .HasMaxLength(50);

                    b.Property<DateTime>("EndDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("Job")
                        .HasMaxLength(10);

                    b.Property<string>("MDCode")
                        .HasMaxLength(10);

                    b.Property<string>("MemoCode")
                        .HasMaxLength(10);

                    b.Property<string>("MemoName")
                        .HasMaxLength(200);

                    b.Property<byte>("MemoType");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Program")
                        .HasMaxLength(10);

                    b.Property<string>("Project")
                        .HasMaxLength(10);

                    b.Property<float?>("ReceivedAmount");

                    b.Property<string>("Sector")
                        .HasMaxLength(10);

                    b.Property<DateTime>("StartDate");

                    b.Property<byte>("Status");

                    b.HasKey("AnalyticalId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("AnalyticalDetail");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.AppraisalGeneralQuestions", b =>
                {
                    b.Property<int>("AppraisalGeneralQuestionsId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("DariQuestion");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("OfficeId");

                    b.Property<string>("Question");

                    b.Property<int?>("SequenceNo");

                    b.HasKey("AppraisalGeneralQuestionsId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("AppraisalGeneralQuestions");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.AssignLeaveToEmployee", b =>
                {
                    b.Property<long>("LeaveId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AssignUnit");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<int>("EmployeeId");

                    b.Property<int>("FinancialYearId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<int>("LeaveReasonId");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Status")
                        .HasMaxLength(50);

                    b.Property<int?>("UsedLeaveUnit");

                    b.HasKey("LeaveId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("FinancialYearId");

                    b.HasIndex("LeaveReasonId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("AssignLeaveToEmployee");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.AttendanceGroupMaster", b =>
                {
                    b.Property<long>("AttendanceGroupId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name");

                    b.HasKey("AttendanceGroupId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("AttendanceGroupMaster");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.EmployeeAnalyticalDetail", b =>
                {
                    b.Property<int>("AnalyticalID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AccountCode")
                        .HasMaxLength(10);

                    b.Property<string>("Area")
                        .HasMaxLength(10);

                    b.Property<string>("CostBook")
                        .HasMaxLength(10);

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Donor")
                        .HasMaxLength(10);

                    b.Property<int>("EmployeeID");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("Job")
                        .HasMaxLength(10);

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Program")
                        .HasMaxLength(10);

                    b.Property<string>("Project")
                        .HasMaxLength(10);

                    b.Property<float?>("SalaryPercentage");

                    b.Property<string>("Sector")
                        .HasMaxLength(10);

                    b.HasKey("AnalyticalID");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("EmployeeAnalyticalDetail");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.EmployeeApplyLeave", b =>
                {
                    b.Property<long>("ApplyLeaveId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ApplyLeaveStatusId")
                        .HasMaxLength(30);

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("EmployeeId");

                    b.Property<int?>("FinancialYearId");

                    b.Property<DateTime>("FromDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<int>("LeaveReasonId");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Remarks");

                    b.Property<DateTime>("ToDate");

                    b.HasKey("ApplyLeaveId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("FinancialYearId");

                    b.HasIndex("LeaveReasonId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("EmployeeApplyLeave");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.EmployeeAppraisalDetails", b =>
                {
                    b.Property<int>("EmployeeAppraisalDetailsId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AppraisalPeriod");

                    b.Property<bool>("AppraisalStatus");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<DateTime>("CurrentAppraisalDate");

                    b.Property<string>("Department");

                    b.Property<string>("DutyStation");

                    b.Property<string>("EmployeeCode");

                    b.Property<int>("EmployeeId");

                    b.Property<string>("EmployeeName");

                    b.Property<string>("FatherName");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("OfficeId");

                    b.Property<string>("Position");

                    b.Property<string>("Qualification");

                    b.Property<DateTime>("RecruitmentDate");

                    b.Property<int?>("TotalScore");

                    b.HasKey("EmployeeAppraisalDetailsId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("EmployeeAppraisalDetails");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.EmployeeAppraisalQuestions", b =>
                {
                    b.Property<int>("EmployeeAppraisalQuestionsId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AppraisalGeneralQuestionsId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<DateTime>("CurrentAppraisalDate");

                    b.Property<int>("EmployeeId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Remarks");

                    b.Property<int?>("Score");

                    b.HasKey("EmployeeAppraisalQuestionsId");

                    b.HasIndex("AppraisalGeneralQuestionsId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("EmployeeAppraisalQuestions");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.EmployeeAppraisalTeamMember", b =>
                {
                    b.Property<int>("EmployeeAppraisalTeamMemberId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int>("EmployeeAppraisalDetailsId");

                    b.Property<int>("EmployeeId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("EmployeeAppraisalTeamMemberId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("EmployeeAppraisalTeamMember");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.EmployeeAttendance", b =>
                {
                    b.Property<long>("AttendanceId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AttendanceTypeId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<DateTime>("Date");

                    b.Property<int>("EmployeeId");

                    b.Property<int?>("FinancialYearId");

                    b.Property<long?>("HolidayId");

                    b.Property<int?>("HoverTimeHours");

                    b.Property<DateTime?>("InTime");

                    b.Property<bool?>("IsDeleted");

                    b.Property<int?>("LeaveReasonId");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<DateTime?>("OutTime");

                    b.Property<int>("OverTimeMinutes");

                    b.Property<string>("Remarks");

                    b.Property<string>("TotalWorkTime");

                    b.Property<int>("WorkTimeMinutes");

                    b.HasKey("AttendanceId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("FinancialYearId");

                    b.HasIndex("HolidayId");

                    b.HasIndex("LeaveReasonId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("EmployeeAttendance");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.EmployeeContract", b =>
                {
                    b.Property<int>("EmployeeContractId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("BudgetLine");

                    b.Property<string>("BudgetLineDari");

                    b.Property<DateTime?>("ContractEndDate");

                    b.Property<float?>("ContractNumber");

                    b.Property<float?>("ContractPeriod");

                    b.Property<DateTime?>("ContractStartDate");

                    b.Property<string>("ContractStatus");

                    b.Property<int?>("Country");

                    b.Property<string>("CountryDari");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("Designation");

                    b.Property<string>("DesignationDari");

                    b.Property<int?>("DurationOfContract");

                    b.Property<int?>("DutyStation");

                    b.Property<string>("DutyStationDari");

                    b.Property<string>("EmployeeCode");

                    b.Property<int>("EmployeeId");

                    b.Property<string>("EmployeeNameDari");

                    b.Property<string>("FatherName");

                    b.Property<string>("FatherNameDari");

                    b.Property<int?>("Grade");

                    b.Property<string>("GradeDari");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("Job");

                    b.Property<string>("JobDari");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("PeriodType");

                    b.Property<int?>("Project");

                    b.Property<string>("ProjectNameDari");

                    b.Property<int?>("Province");

                    b.Property<string>("ProvinceDari");

                    b.Property<double?>("Salary");

                    b.Property<int?>("WorkDayHours");

                    b.Property<int?>("WorkTime");

                    b.HasKey("EmployeeContractId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("Grade");

                    b.HasIndex("ModifiedById");

                    b.ToTable("EmployeeContract");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.EmployeeContractType", b =>
                {
                    b.Property<int>("EmployeeContractTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("EmployeeContractTypeName");

                    b.HasKey("EmployeeContractTypeId");

                    b.ToTable("EmployeeContractType");

                    b.HasData(
                        new
                        {
                            EmployeeContractTypeId = 1,
                            EmployeeContractTypeName = "Probationary"
                        },
                        new
                        {
                            EmployeeContractTypeId = 2,
                            EmployeeContractTypeName = "PartTime"
                        },
                        new
                        {
                            EmployeeContractTypeId = 3,
                            EmployeeContractTypeName = "Permanent"
                        });
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.EmployeeDetail", b =>
                {
                    b.Property<int>("EmployeeID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("Age");

                    b.Property<string>("BirthPlace");

                    b.Property<string>("City");

                    b.Property<string>("CloseRelativeList");

                    b.Property<string>("Country");

                    b.Property<int?>("CountryId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CurrentAddress");

                    b.Property<DateTime?>("DateOfBirth");

                    b.Property<string>("District");

                    b.Property<string>("DocumentGUID");

                    b.Property<int?>("DocumentType");

                    b.Property<string>("EducationList");

                    b.Property<string>("Email");

                    b.Property<string>("EmployeeCode");

                    b.Property<string>("EmployeeName");

                    b.Property<string>("EmployeePhoto");

                    b.Property<int?>("EmployeeTypeId");

                    b.Property<string>("Experience");

                    b.Property<int?>("ExperienceMonth");

                    b.Property<int?>("ExperienceYear");

                    b.Property<string>("Extension");

                    b.Property<string>("FatherName");

                    b.Property<string>("Fax");

                    b.Property<string>("Grade");

                    b.Property<int?>("GradeId");

                    b.Property<int?>("HigherQualificationId");

                    b.Property<string>("IDCard");

                    b.Property<string>("InternationalEmploymentList");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("IssuePlace");

                    b.Property<string>("Language");

                    b.Property<string>("MaritalStatus");

                    b.Property<int?>("MaritalStatusId");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("NationalEmploymentList");

                    b.Property<string>("Nationality");

                    b.Property<int?>("NationalityId");

                    b.Property<int?>("NoOfChildren");

                    b.Property<string>("OtherSkillList");

                    b.Property<string>("Passport");

                    b.Property<string>("PassportNo");

                    b.Property<string>("PermanentAddress");

                    b.Property<string>("Phone");

                    b.Property<string>("PlaceOfBirth");

                    b.Property<string>("PreviousWork");

                    b.Property<string>("Profession");

                    b.Property<long?>("ProjectId");

                    b.Property<string>("Province");

                    b.Property<int?>("ProvinceId");

                    b.Property<string>("Qualification");

                    b.Property<string>("ReferBy");

                    b.Property<string>("RefereeList");

                    b.Property<string>("RegCode");

                    b.Property<string>("Remarks");

                    b.Property<string>("Resume");

                    b.Property<string>("Sex");

                    b.Property<int?>("SexId");

                    b.Property<string>("SpeakLanguageList");

                    b.Property<string>("University");

                    b.HasKey("EmployeeID");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeTypeId");

                    b.HasIndex("HigherQualificationId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("NationalityId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("EmployeeDetail");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.EmployeeDocumentDetail", b =>
                {
                    b.Property<int>("DocumentID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<DateTime?>("DocumentDate");

                    b.Property<string>("DocumentFilePath");

                    b.Property<string>("DocumentGUID");

                    b.Property<string>("DocumentName")
                        .HasMaxLength(100);

                    b.Property<int?>("DocumentType");

                    b.Property<int?>("EmployeeID");

                    b.Property<string>("Extension");

                    b.Property<byte[]>("FilePath");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("DocumentID");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("ModifiedById");

                    b.ToTable("EmployeeDocumentDetail");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.EmployeeEducations", b =>
                {
                    b.Property<int>("EmployeeEducationsId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Degree");

                    b.Property<DateTime?>("EducationFrom");

                    b.Property<DateTime?>("EducationTo");

                    b.Property<int?>("EmployeeID");

                    b.Property<string>("FieldOfStudy");

                    b.Property<string>("Institute");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("EmployeeEducationsId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("ModifiedById");

                    b.ToTable("EmployeeEducations");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.EmployeeEvaluation", b =>
                {
                    b.Property<int>("EmployeeEvaluationId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AppraisalTeamMember1");

                    b.Property<string>("AppraisalTeamMember2");

                    b.Property<string>("CommentsByEmployee");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<DateTime>("CurrentAppraisalDate");

                    b.Property<int>("DirectSupervisor");

                    b.Property<int>("EmployeeAppraisalDetailsId");

                    b.Property<int>("EmployeeId");

                    b.Property<string>("EvaluationStatus");

                    b.Property<string>("FinalResultQues1");

                    b.Property<string>("FinalResultQues2");

                    b.Property<string>("FinalResultQues3");

                    b.Property<string>("FinalResultQues4");

                    b.Property<string>("FinalResultQues5");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("EmployeeEvaluationId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("EmployeeEvaluation");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.EmployeeEvaluationTraining", b =>
                {
                    b.Property<int>("EmployeeEvaluationTrainingId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CatchLevel");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int>("EmployeeAppraisalDetailsId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("OthRecommendation");

                    b.Property<string>("Participated");

                    b.Property<string>("Program");

                    b.Property<string>("RefresherTrm");

                    b.Property<string>("TrainingProgram");

                    b.HasKey("EmployeeEvaluationTrainingId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("EmployeeEvaluationTraining");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.EmployeeHealthInfo", b =>
                {
                    b.Property<long>("EmployeeHealthInfoId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BloodGroup");

                    b.Property<float?>("BloodPressure");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("EmployeeId");

                    b.Property<string>("Hbs");

                    b.Property<string>("Hcv");

                    b.Property<string>("HealthPresentCondition");

                    b.Property<float?>("HearingL");

                    b.Property<string>("HearingLType");

                    b.Property<float?>("HearingR");

                    b.Property<string>("HearingRType");

                    b.Property<float?>("Height");

                    b.Property<string>("HistoryOfPastIllness");

                    b.Property<string>("HospitalAddress");

                    b.Property<string>("HospitalName");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("OverallHealthCondition");

                    b.Property<string>("PhysicanName");

                    b.Property<string>("ResultOfChestXRay");

                    b.Property<float?>("VisualWithGlassesL");

                    b.Property<float?>("VisualWithGlassesR");

                    b.Property<float?>("VisualWithoutGlassesL");

                    b.Property<float?>("VisualWithoutGlassesR");

                    b.Property<float?>("Weight");

                    b.HasKey("EmployeeHealthInfoId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("EmployeeHealthInfo");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.EmployeeHealthQuestion", b =>
                {
                    b.Property<int>("EmployeeHealthQuestionId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Answer");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int>("EmployeeId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Question");

                    b.HasKey("EmployeeHealthQuestionId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("EmployeeHealthQuestion");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.EmployeeHistoryDetail", b =>
                {
                    b.Property<long>("HistoryID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<int?>("EmployeeID");

                    b.Property<DateTime?>("HistoryDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("HistoryID");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("ModifiedById");

                    b.ToTable("EmployeeHistoryDetail");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.EmployeeHistoryOutsideCountry", b =>
                {
                    b.Property<int>("EmployeeHistoryOutsideCountryId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("EmployeeID");

                    b.Property<DateTime?>("EmploymentFrom");

                    b.Property<DateTime?>("EmploymentTo");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("MonthlySalary");

                    b.Property<string>("Organization");

                    b.Property<string>("Position");

                    b.Property<string>("ReasonForLeaving");

                    b.HasKey("EmployeeHistoryOutsideCountryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("ModifiedById");

                    b.ToTable("EmployeeHistoryOutsideCountry");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.EmployeeHistoryOutsideOrganization", b =>
                {
                    b.Property<int>("EmployeeHistoryOutsideOrganizationId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("EmployeeID");

                    b.Property<DateTime?>("EmploymentFrom");

                    b.Property<DateTime?>("EmploymentTo");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("MonthlySalary");

                    b.Property<string>("Organization");

                    b.Property<string>("Position");

                    b.Property<string>("ReasonForLeaving");

                    b.HasKey("EmployeeHistoryOutsideOrganizationId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("ModifiedById");

                    b.ToTable("EmployeeHistoryOutsideOrganization");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.EmployeeInfoReferences", b =>
                {
                    b.Property<int>("EmployeeInfoReferencesId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Email");

                    b.Property<int>("EmployeeID");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name");

                    b.Property<string>("Organization");

                    b.Property<long>("PhoneNo");

                    b.Property<string>("Position");

                    b.Property<string>("Relationship");

                    b.HasKey("EmployeeInfoReferencesId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("ModifiedById");

                    b.ToTable("EmployeeInfoReferences");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.EmployeeLanguages", b =>
                {
                    b.Property<int>("SpeakLanguageId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int>("EmployeeId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<int>("LanguageId");

                    b.Property<int>("Listening");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("Reading");

                    b.Property<int>("Speaking");

                    b.Property<int>("Writing");

                    b.HasKey("SpeakLanguageId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LanguageId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("EmployeeLanguages");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.EmployeeMonthlyAttendance", b =>
                {
                    b.Property<int>("MonthlyAttendanceId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AbsentHours");

                    b.Property<double>("AdvanceAmount");

                    b.Property<int?>("AdvanceId");

                    b.Property<double>("AdvanceRecoveryAmount");

                    b.Property<int?>("AttendanceHours");

                    b.Property<int>("AttendanceMinutes");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("CurrencyId");

                    b.Property<int?>("DeputationHours");

                    b.Property<int?>("EmployeeId");

                    b.Property<double?>("GrossSalary");

                    b.Property<double?>("HourlyRate");

                    b.Property<bool>("IsAdvanceApproved");

                    b.Property<bool>("IsAdvanceRecovery");

                    b.Property<bool>("IsApproved");

                    b.Property<bool?>("IsDeleted");

                    b.Property<int?>("LeaveHours");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("Month");

                    b.Property<double?>("NetSalary");

                    b.Property<int?>("OfficeId");

                    b.Property<int>("OverTimeMinutes");

                    b.Property<int?>("OvertimeHours");

                    b.Property<int?>("PaymentType");

                    b.Property<double?>("PensionAmount");

                    b.Property<double?>("PensionRate");

                    b.Property<double?>("SalaryTax");

                    b.Property<bool?>("Sent");

                    b.Property<bool?>("Status");

                    b.Property<double?>("TotalAllowance");

                    b.Property<double?>("TotalDeduction");

                    b.Property<int?>("TotalDuration");

                    b.Property<double?>("TotalGeneralAmount");

                    b.Property<int?>("Year");

                    b.HasKey("MonthlyAttendanceId");

                    b.HasIndex("AdvanceId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("EmployeeMonthlyAttendance");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.EmployeeMonthlyPayroll", b =>
                {
                    b.Property<long>("MonthlyPayrollId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CurrencyId");

                    b.Property<DateTime>("Date");

                    b.Property<int>("EmployeeID");

                    b.Property<double>("MonthlyAmount");

                    b.Property<int>("SalaryHeadId");

                    b.HasKey("MonthlyPayrollId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("SalaryHeadId");

                    b.ToTable("EmployeeMonthlyPayroll");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.EmployeeOtherSkills", b =>
                {
                    b.Property<int>("EmployeeOtherSkillsId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AbilityLevel");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int>("EmployeeID");

                    b.Property<string>("Experience");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Remarks");

                    b.Property<string>("TypeOfSkill");

                    b.HasKey("EmployeeOtherSkillsId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("ModifiedById");

                    b.ToTable("EmployeeOtherSkills");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.EmployeePaymentTypes", b =>
                {
                    b.Property<int>("EmployeePaymentTypesId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("Absent");

                    b.Property<int?>("AbsentDays");

                    b.Property<double?>("AdvanceAmount");

                    b.Property<int?>("AdvanceId");

                    b.Property<double?>("AdvanceRecoveryAmount");

                    b.Property<int?>("Attendance");

                    b.Property<float?>("BasicPay");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CurrencyCode");

                    b.Property<int?>("CurrencyId");

                    b.Property<int?>("EmployeeID");

                    b.Property<string>("EmployeeName");

                    b.Property<DateTime?>("FinancialYearDate");

                    b.Property<double?>("GrossSalary");

                    b.Property<double?>("HourlyRate");

                    b.Property<bool?>("IsAdvanceApproved");

                    b.Property<bool?>("IsAdvanceRecovery");

                    b.Property<bool?>("IsApproved");

                    b.Property<bool?>("IsDeleted");

                    b.Property<int?>("LeaveDays");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<double?>("NetSalary");

                    b.Property<string>("OfficeCode");

                    b.Property<int?>("OfficeId");

                    b.Property<double?>("OverTimeHours");

                    b.Property<DateTime?>("PaymentDate");

                    b.Property<int?>("PaymentType");

                    b.Property<int?>("PayrollMonth");

                    b.Property<int?>("PayrollYear");

                    b.Property<double?>("PensionAmount");

                    b.Property<double?>("PensionRate");

                    b.Property<int?>("PresentDays");

                    b.Property<double?>("SalaryTax");

                    b.Property<double?>("TotalAllowance");

                    b.Property<double?>("TotalDeduction");

                    b.Property<int?>("TotalDuration");

                    b.Property<double?>("TotalGeneralAmount");

                    b.Property<int?>("TotalWorkHours");

                    b.Property<int?>("WorkingDays");

                    b.HasKey("EmployeePaymentTypesId");

                    b.HasIndex("AdvanceId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("ModifiedById");

                    b.ToTable("EmployeePaymentTypes");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.EmployeePayroll", b =>
                {
                    b.Property<long>("PayrollId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("AccountNo");

                    b.Property<int?>("AllowDeductionFlag");

                    b.Property<double?>("BasicPay");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CurrencyCode");

                    b.Property<int?>("CurrencyId");

                    b.Property<int>("EmployeeID");

                    b.Property<int?>("HeadTypeId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<double?>("MonthlyAmount");

                    b.Property<int?>("PaymentType");

                    b.Property<double?>("PensionRate");

                    b.Property<int?>("SalaryHeadId");

                    b.Property<int?>("TransactionTypeId");

                    b.HasKey("PayrollId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("SalaryHeadId");

                    b.ToTable("EmployeePayroll");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.EmployeePayrollAccountHead", b =>
                {
                    b.Property<int>("EmployeePayrollAccountId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("AccountNo");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<int>("EmployeeId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("PayrollHeadId");

                    b.Property<string>("PayrollHeadName");

                    b.Property<int>("PayrollHeadTypeId");

                    b.Property<int?>("TransactionTypeId");

                    b.HasKey("EmployeePayrollAccountId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("PayrollHeadId");

                    b.ToTable("EmployeePayrollAccountHead");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.EmployeePayrollForMonth", b =>
                {
                    b.Property<int>("EmployeePaymentTypesId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AbsentDays");

                    b.Property<double>("AdvanceAmount");

                    b.Property<double>("AdvanceRecoveryAmount");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int>("CurrencyId");

                    b.Property<int>("EmployeeID");

                    b.Property<string>("EmployeeName");

                    b.Property<DateTime>("FinancialYearDate");

                    b.Property<double?>("GrossSalary");

                    b.Property<double?>("HourlyRate");

                    b.Property<bool>("IsAdvanceApproved");

                    b.Property<bool>("IsAdvanceRecovery");

                    b.Property<bool>("IsApproved");

                    b.Property<bool?>("IsDeleted");

                    b.Property<int>("LeaveDays");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<double?>("NetSalary");

                    b.Property<int>("OfficeId");

                    b.Property<double?>("OverTimeHours");

                    b.Property<int>("PaymentType");

                    b.Property<double?>("PensionAmount");

                    b.Property<double?>("PensionRate");

                    b.Property<int>("PresentDays");

                    b.Property<double?>("SalaryTax");

                    b.Property<double?>("TotalAllowance");

                    b.Property<double?>("TotalDeduction");

                    b.Property<double?>("TotalGeneralAmount");

                    b.Property<int>("TotalWorkHours");

                    b.Property<int>("WorkingDays");

                    b.HasKey("EmployeePaymentTypesId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("ModifiedById");

                    b.ToTable("EmployeePayrollForMonth");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.EmployeePayrollMonth", b =>
                {
                    b.Property<long>("MonthlyPayrollId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("AccountNo");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int>("CurrencyId");

                    b.Property<DateTime>("Date");

                    b.Property<int>("EmployeeID");

                    b.Property<int?>("HeadTypeId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<double>("MonthlyAmount");

                    b.Property<int?>("PaymentType");

                    b.Property<int>("SalaryHeadId");

                    b.Property<int?>("TransactionTypeId");

                    b.HasKey("MonthlyPayrollId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("SalaryHeadId");

                    b.ToTable("EmployeePayrollMonth");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.EmployeePensionRate", b =>
                {
                    b.Property<int>("EmployeePensionRateId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int>("FinancialYearId");

                    b.Property<bool>("IsDefault");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<double?>("PensionRate");

                    b.HasKey("EmployeePensionRateId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("FinancialYearId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("EmployeePensionRate");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.EmployeeProfessionalDetail", b =>
                {
                    b.Property<long>("EmployeeProfessionalId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("AttendanceGroupId");

                    b.Property<string>("ContractStatus");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("DepartmentId");

                    b.Property<string>("Departments");

                    b.Property<string>("Designation");

                    b.Property<int?>("DesignationId");

                    b.Property<int?>("EmployeeContractTypeId");

                    b.Property<int?>("EmployeeId");

                    b.Property<int?>("EmployeeTypeId");

                    b.Property<DateTime?>("FiredOn");

                    b.Property<string>("FiredReason");

                    b.Property<DateTime?>("HiredOn");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("JobDescription");

                    b.Property<string>("MembershipSupportInPoliticalParty");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("OfficeId");

                    b.Property<string>("Profession");

                    b.Property<int?>("ProfessionId");

                    b.Property<long?>("ProjectId");

                    b.Property<string>("RegCode");

                    b.Property<DateTime?>("ResignationOn");

                    b.Property<string>("ResignationReason");

                    b.Property<string>("Status")
                        .HasMaxLength(20);

                    b.Property<string>("TinNumber");

                    b.Property<string>("TrainingBenefits");

                    b.Property<string>("WorkType");

                    b.HasKey("EmployeeProfessionalId");

                    b.HasIndex("AttendanceGroupId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DesignationId");

                    b.HasIndex("EmployeeContractTypeId");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.HasIndex("EmployeeTypeId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("OfficeId");

                    b.HasIndex("ProfessionId");

                    b.ToTable("EmployeeProfessionalDetail");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.EmployeeRelativeInfo", b =>
                {
                    b.Property<int>("EmployeeRelativeInfoId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Email");

                    b.Property<int>("EmployeeID");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name");

                    b.Property<string>("Organization");

                    b.Property<long>("PhoneNo");

                    b.Property<string>("Position");

                    b.Property<string>("Relationship");

                    b.HasKey("EmployeeRelativeInfoId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("ModifiedById");

                    b.ToTable("EmployeeRelativeInfo");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.EmployeeSalaryAnalyticalInfo", b =>
                {
                    b.Property<int>("EmployeeSalaryAnalyticalInfoId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AccountCode");

                    b.Property<long>("BudgetlineId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int>("EmployeeID");

                    b.Property<long?>("HiringRequestId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long>("ProjectId");

                    b.Property<double>("SalaryPercentage");

                    b.HasKey("EmployeeSalaryAnalyticalInfoId");

                    b.HasIndex("BudgetlineId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("HiringRequestId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.ToTable("EmployeeSalaryAnalyticalInfo");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.EmployeeSalaryBudget", b =>
                {
                    b.Property<int>("EmployeeSalaryBudgetId")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("BudgetDisbursed");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int>("CurrencyId");

                    b.Property<int>("EmployeeID");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<double>("SalaryBudget");

                    b.Property<string>("Year");

                    b.HasKey("EmployeeSalaryBudgetId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("ModifiedById");

                    b.ToTable("EmployeeSalaryBudget");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.EmployeeSalaryDetails", b =>
                {
                    b.Property<long>("SalaryId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int>("CurrencyId");

                    b.Property<string>("Description");

                    b.Property<int>("EmployeeId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("PaymentType");

                    b.Property<double?>("PensionRate");

                    b.Property<double?>("TotalAllowance");

                    b.Property<double?>("TotalGeneralAmount");

                    b.Property<double?>("Totalduduction");

                    b.HasKey("SalaryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("EmployeeId")
                        .IsUnique();

                    b.HasIndex("ModifiedById");

                    b.ToTable("EmployeeSalaryDetails");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.EmployeeSalaryPaymentHistory", b =>
                {
                    b.Property<int>("SalaryPaymentId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int>("EmployeeId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<bool>("IsSalaryReverse");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("Month");

                    b.Property<long>("VoucherNo");

                    b.Property<int>("Year");

                    b.HasKey("SalaryPaymentId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("VoucherNo");

                    b.ToTable("EmployeeSalaryPaymentHistory");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.EmployeeType", b =>
                {
                    b.Property<int>("EmployeeTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("EmployeeTypeName")
                        .HasMaxLength(50);

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("EmployeeTypeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("EmployeeType");

                    b.HasData(
                        new
                        {
                            EmployeeTypeId = 1,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(4451),
                            EmployeeTypeName = "Prospective",
                            IsDeleted = false
                        },
                        new
                        {
                            EmployeeTypeId = 2,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(4823),
                            EmployeeTypeName = "Active",
                            IsDeleted = false
                        },
                        new
                        {
                            EmployeeTypeId = 3,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(4831),
                            EmployeeTypeName = "Terminated",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.ExistInterviewDetails", b =>
                {
                    b.Property<int>("ExistInterviewDetailsId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BenefitProgram");

                    b.Property<bool>("Benefits");

                    b.Property<bool>("BetterJobOpportunity");

                    b.Property<bool>("CareerChange");

                    b.Property<string>("CoWorkers");

                    b.Property<string>("ComfortableAppropriately");

                    b.Property<bool>("CompanyInstability");

                    b.Property<bool>("ConflictWithOther");

                    b.Property<bool>("ConflictWithSuoervisors");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("DutiesOfJob");

                    b.Property<string>("EmployeeCode");

                    b.Property<int>("EmployeeID");

                    b.Property<string>("EncouragedCooperation");

                    b.Property<string>("Equipped");

                    b.Property<string>("Explain");

                    b.Property<bool>("FamilyReasons");

                    b.Property<string>("GaveFairTreatment");

                    b.Property<string>("GenderFriendlyEnvironment");

                    b.Property<string>("HadAdequateEquipment");

                    b.Property<string>("HadGoodSynergy");

                    b.Property<string>("HadKnowledgeOfJob");

                    b.Property<string>("HadKnowledgeSupervision");

                    b.Property<bool>("HealthIssue");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("JobOrientation");

                    b.Property<string>("JobWasChallenging");

                    b.Property<string>("MaintainedConsistent");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<bool>("NotChallenged");

                    b.Property<string>("OpportunityAdvancement");

                    b.Property<string>("OverallJobSatisfaction");

                    b.Property<bool>("Pay");

                    b.Property<bool>("PersonalReasons");

                    b.Property<string>("ProvidedDevelopment");

                    b.Property<string>("ProvidedRecognition");

                    b.Property<bool>("Question");

                    b.Property<string>("RecognizedEmployeesContribution");

                    b.Property<bool>("Relocation");

                    b.Property<bool>("ReturnToSchool");

                    b.Property<string>("SalaryTreatment");

                    b.Property<string>("SkillsEffectivelyUsed");

                    b.Property<string>("SufficientResources");

                    b.Property<string>("Supervisors");

                    b.Property<string>("TrainingAndDevelopmentPrograms");

                    b.Property<string>("WasAdequatelyStaffed");

                    b.Property<string>("WasAvailableToDiscuss");

                    b.Property<string>("WasEfficient");

                    b.Property<string>("WasOpenSuggestions");

                    b.Property<string>("WelcomedSuggestions");

                    b.Property<string>("WorkEnvironment");

                    b.Property<string>("WorkLoadReasonable");

                    b.Property<bool>("WorkRelationship");

                    b.Property<string>("WorkingConditions");

                    b.Property<string>("WorkingHours");

                    b.HasKey("ExistInterviewDetailsId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("ModifiedById");

                    b.ToTable("ExistInterviewDetails");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.HRJobInterviewers", b =>
                {
                    b.Property<long>("HRJobInterviewerId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int>("EmployeeId");

                    b.Property<int>("InterviewDetailsId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("HRJobInterviewerId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("InterviewDetailsId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("HRJobInterviewers");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.HolidayDetails", b =>
                {
                    b.Property<long>("HolidayId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<DateTime>("Date");

                    b.Property<int?>("FinancialYearId");

                    b.Property<string>("HolidayName")
                        .HasMaxLength(50);

                    b.Property<int?>("HolidayType");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("OfficeId");

                    b.Property<string>("Remarks");

                    b.HasKey("HolidayId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("FinancialYearId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("OfficeId");

                    b.ToTable("HolidayDetails");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.HolidayWeeklyDetails", b =>
                {
                    b.Property<int>("HolidayWeeklyId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Day")
                        .HasMaxLength(30);

                    b.Property<int>("FinancialYearId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("OfficeId");

                    b.HasKey("HolidayWeeklyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("FinancialYearId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("OfficeId");

                    b.ToTable("HolidayWeeklyDetails");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.InterviewDetails", b =>
                {
                    b.Property<int>("InterviewDetailsId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<long>("CurrentBase");

                    b.Property<bool>("CurrentMeal");

                    b.Property<long>("CurrentOther");

                    b.Property<bool>("CurrentTransportation");

                    b.Property<int>("EmployeeID");

                    b.Property<long>("ExpectationBase");

                    b.Property<bool>("ExpectationMeal");

                    b.Property<long>("ExpectationOther");

                    b.Property<bool>("ExpectationTransportation");

                    b.Property<string>("Experience");

                    b.Property<string>("InterviewStatus");

                    b.Property<string>("Interviewer1");

                    b.Property<string>("Interviewer2");

                    b.Property<string>("Interviewer3");

                    b.Property<string>("Interviewer4");

                    b.Property<bool?>("IsDeleted");

                    b.Property<long>("JobId");

                    b.Property<DateTime>("JoiningDate");

                    b.Property<string>("MaritalStatus");

                    b.Property<string>("MarksObtained");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("NoticePeriod");

                    b.Property<string>("PassportNo");

                    b.Property<string>("PlaceOfBirth");

                    b.Property<string>("PreferedLocation");

                    b.Property<string>("ProfessionalCriteriaMarks");

                    b.Property<string>("Ques1");

                    b.Property<string>("Ques2");

                    b.Property<string>("Ques3");

                    b.Property<string>("Status");

                    b.Property<string>("TazkiraIssuePlace");

                    b.Property<string>("TotalMarksObtained");

                    b.Property<string>("University");

                    b.Property<string>("WrittenTestMarks");

                    b.HasKey("InterviewDetailsId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("ModifiedById");

                    b.ToTable("InterviewDetails");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.InterviewLanguages", b =>
                {
                    b.Property<int>("InterviewLanguagesId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int>("InterviewDetailsId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<int?>("LanguageId");

                    b.Property<string>("LanguageName");

                    b.Property<int?>("Listening");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("Reading");

                    b.Property<int?>("Speaking");

                    b.Property<int?>("Writing");

                    b.HasKey("InterviewLanguagesId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("InterviewDetailsId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("InterviewLanguages");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.InterviewScheduleDetails", b =>
                {
                    b.Property<long>("ScheduleId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("Approval1");

                    b.Property<bool?>("Approval2");

                    b.Property<bool?>("Approval3");

                    b.Property<bool?>("Approval4");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<DateTime>("Date");

                    b.Property<int>("EmployeeId");

                    b.Property<int?>("GradeId");

                    b.Property<int?>("InterviewStatus")
                        .HasMaxLength(50);

                    b.Property<bool?>("IsDeleted");

                    b.Property<long>("JobId");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("ScheduleId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("GradeId");

                    b.HasIndex("JobId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("InterviewScheduleDetails");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.InterviewTechnicalQuestion", b =>
                {
                    b.Property<int>("InterviewTechnicalQuestionId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Answer");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int>("InterviewDetailsId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Question");

                    b.HasKey("InterviewTechnicalQuestionId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("InterviewDetailsId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("InterviewTechnicalQuestion");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.InterviewTechnicalQuestions", b =>
                {
                    b.Property<int>("InterviewTechnicalQuestionsId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("OfficeId");

                    b.Property<string>("Question");

                    b.HasKey("InterviewTechnicalQuestionsId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("InterviewTechnicalQuestions");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.InterviewTrainings", b =>
                {
                    b.Property<int>("InterviewTrainingsId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<DateTime>("EndDate");

                    b.Property<int>("InterviewDetailsId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<DateTime>("StartDate");

                    b.Property<string>("StudyingCountry");

                    b.Property<string>("TrainingName");

                    b.Property<int>("TraininigType");

                    b.HasKey("InterviewTrainingsId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("InterviewDetailsId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("InterviewTrainings");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.PayrollAccountHead", b =>
                {
                    b.Property<int>("PayrollHeadId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("AccountNo");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("PayrollHeadName");

                    b.Property<int>("PayrollHeadTypeId");

                    b.Property<int?>("TransactionTypeId");

                    b.HasKey("PayrollHeadId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("PayrollAccountHead");

                    b.HasData(
                        new
                        {
                            PayrollHeadId = 1,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 953, DateTimeKind.Utc).AddTicks(8963),
                            IsDeleted = false,
                            PayrollHeadName = "Net Salary",
                            PayrollHeadTypeId = 3,
                            TransactionTypeId = 1
                        },
                        new
                        {
                            PayrollHeadId = 2,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 954, DateTimeKind.Utc).AddTicks(627),
                            IsDeleted = false,
                            PayrollHeadName = "Advance Deduction",
                            PayrollHeadTypeId = 2,
                            TransactionTypeId = 1
                        },
                        new
                        {
                            PayrollHeadId = 3,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 954, DateTimeKind.Utc).AddTicks(649),
                            IsDeleted = false,
                            PayrollHeadName = "Salary Tax",
                            PayrollHeadTypeId = 2,
                            TransactionTypeId = 1
                        },
                        new
                        {
                            PayrollHeadId = 4,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 954, DateTimeKind.Utc).AddTicks(650),
                            IsDeleted = true,
                            PayrollHeadName = "Gross Salary",
                            PayrollHeadTypeId = 3,
                            TransactionTypeId = 2
                        },
                        new
                        {
                            PayrollHeadId = 5,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 954, DateTimeKind.Utc).AddTicks(651),
                            IsDeleted = false,
                            PayrollHeadName = "Pension",
                            PayrollHeadTypeId = 2,
                            TransactionTypeId = 1
                        });
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.PayrollMonthlyHourDetail", b =>
                {
                    b.Property<int>("PayrollMonthlyHourID")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("AttendanceGroupId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("Hours");

                    b.Property<DateTime?>("InTime");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("OfficeId");

                    b.Property<DateTime?>("OutTime");

                    b.Property<int?>("PayrollMonth");

                    b.Property<int?>("PayrollYear");

                    b.Property<int?>("WorkingDay");

                    b.Property<int?>("WorkingTime");

                    b.HasKey("PayrollMonthlyHourID");

                    b.HasIndex("AttendanceGroupId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("OfficeId");

                    b.ToTable("PayrollMonthlyHourDetail");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.SalaryHeadDetails", b =>
                {
                    b.Property<int>("SalaryHeadId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("AccountNo");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<string>("HeadName")
                        .HasMaxLength(50);

                    b.Property<int>("HeadTypeId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("TransactionTypeId");

                    b.HasKey("SalaryHeadId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("SalaryHeadDetails");

                    b.HasData(
                        new
                        {
                            SalaryHeadId = 1,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 956, DateTimeKind.Utc).AddTicks(187),
                            Description = "Tr Allowance",
                            HeadName = "Tr Allowance",
                            HeadTypeId = 1,
                            IsDeleted = false,
                            TransactionTypeId = 2
                        },
                        new
                        {
                            SalaryHeadId = 2,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 956, DateTimeKind.Utc).AddTicks(1035),
                            Description = "Food Allowance",
                            HeadName = "Food Allowance",
                            HeadTypeId = 1,
                            IsDeleted = false,
                            TransactionTypeId = 2
                        },
                        new
                        {
                            SalaryHeadId = 3,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 956, DateTimeKind.Utc).AddTicks(1049),
                            Description = "Fine Deduction",
                            HeadName = "Fine Deduction",
                            HeadTypeId = 2,
                            IsDeleted = false,
                            TransactionTypeId = 1
                        },
                        new
                        {
                            SalaryHeadId = 4,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 956, DateTimeKind.Utc).AddTicks(1050),
                            Description = "Capacity Building Deduction",
                            HeadName = "Capacity Building Deduction",
                            HeadTypeId = 2,
                            IsDeleted = false,
                            TransactionTypeId = 1
                        },
                        new
                        {
                            SalaryHeadId = 5,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 956, DateTimeKind.Utc).AddTicks(1051),
                            Description = "Security Deduction",
                            HeadName = "Security Deduction",
                            HeadTypeId = 2,
                            IsDeleted = false,
                            TransactionTypeId = 1
                        },
                        new
                        {
                            SalaryHeadId = 6,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 956, DateTimeKind.Utc).AddTicks(1052),
                            Description = "Other Allowance",
                            HeadName = "Other Allowance",
                            HeadTypeId = 1,
                            IsDeleted = false,
                            TransactionTypeId = 2
                        },
                        new
                        {
                            SalaryHeadId = 7,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 956, DateTimeKind.Utc).AddTicks(1053),
                            Description = "Other Deduction",
                            HeadName = "Other Deduction",
                            HeadTypeId = 2,
                            IsDeleted = false,
                            TransactionTypeId = 1
                        },
                        new
                        {
                            SalaryHeadId = 8,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 956, DateTimeKind.Utc).AddTicks(1054),
                            Description = "Medical Allowance",
                            HeadName = "Medical Allowance",
                            HeadTypeId = 1,
                            IsDeleted = false,
                            TransactionTypeId = 2
                        },
                        new
                        {
                            SalaryHeadId = 9,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 956, DateTimeKind.Utc).AddTicks(1056),
                            Description = "Other1Allowance",
                            HeadName = "Other1Allowance",
                            HeadTypeId = 1,
                            IsDeleted = false,
                            TransactionTypeId = 2
                        },
                        new
                        {
                            SalaryHeadId = 10,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 956, DateTimeKind.Utc).AddTicks(1057),
                            Description = "Other2Allowance",
                            HeadName = "Other2Allowance",
                            HeadTypeId = 1,
                            IsDeleted = false,
                            TransactionTypeId = 2
                        },
                        new
                        {
                            SalaryHeadId = 11,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 956, DateTimeKind.Utc).AddTicks(1058),
                            Description = "Basic Pay (In hours)",
                            HeadName = "Basic Pay (In hours)",
                            HeadTypeId = 3,
                            IsDeleted = false,
                            TransactionTypeId = 2
                        });
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.SalaryTaxReportContent", b =>
                {
                    b.Property<int>("SalaryTaxReportContentId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("EmployerAuthorizedOfficerName");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("OfficeId");

                    b.Property<string>("PositionAuthorizedOfficer");

                    b.HasKey("SalaryTaxReportContentId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("SalaryTaxReportContent");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.TechnicalQuestion", b =>
                {
                    b.Property<int>("TechnicalQuestionId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Question");

                    b.HasKey("TechnicalQuestionId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("TechnicalQuestion");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.ItemSpecificationDetails", b =>
                {
                    b.Property<int>("ItemSpecificationDetailsId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ItemId");

                    b.Property<int>("ItemSpecificationMasterId");

                    b.Property<string>("ItemSpecificationValue");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("ItemSpecificationDetailsId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ItemSpecificationMasterId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("ItemSpecificationDetails");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.ItemSpecificationMaster", b =>
                {
                    b.Property<int>("ItemSpecificationMasterId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ItemSpecificationField");

                    b.Property<int>("ItemTypeId");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("OfficeId");

                    b.HasKey("ItemSpecificationMasterId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ItemTypeId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("OfficeId");

                    b.ToTable("ItemSpecificationMaster");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.JobGrade", b =>
                {
                    b.Property<int>("GradeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("GradeName");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("GradeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("JobGrade");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.JobHiringDetails", b =>
                {
                    b.Property<long>("JobId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("GradeId");

                    b.Property<long?>("HiringRequestId");

                    b.Property<bool>("IsActive");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("JobCode")
                        .HasMaxLength(50);

                    b.Property<string>("JobDescription");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("OfficeId");

                    b.Property<int?>("ProfessionId");

                    b.Property<int>("Unit");

                    b.HasKey("JobId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("GradeId");

                    b.HasIndex("HiringRequestId")
                        .IsUnique();

                    b.HasIndex("ModifiedById");

                    b.HasIndex("OfficeId");

                    b.ToTable("JobHiringDetails");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.JournalDetail", b =>
                {
                    b.Property<int>("JournalCode")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("JournalName")
                        .HasMaxLength(100);

                    b.Property<byte?>("JournalType");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("JournalCode");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("JournalDetail");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.LanguageDetail", b =>
                {
                    b.Property<int>("LanguageId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("LanguageName");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("LanguageId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("LanguageDetail");

                    b.HasData(
                        new
                        {
                            LanguageId = 1,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 956, DateTimeKind.Utc).AddTicks(2465),
                            IsDeleted = false,
                            LanguageName = "Arabic"
                        },
                        new
                        {
                            LanguageId = 2,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 956, DateTimeKind.Utc).AddTicks(3046),
                            IsDeleted = false,
                            LanguageName = "Dari"
                        },
                        new
                        {
                            LanguageId = 3,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 956, DateTimeKind.Utc).AddTicks(3059),
                            IsDeleted = false,
                            LanguageName = "English"
                        },
                        new
                        {
                            LanguageId = 4,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 956, DateTimeKind.Utc).AddTicks(3061),
                            IsDeleted = false,
                            LanguageName = "French"
                        },
                        new
                        {
                            LanguageId = 5,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 956, DateTimeKind.Utc).AddTicks(3062),
                            IsDeleted = false,
                            LanguageName = "German"
                        },
                        new
                        {
                            LanguageId = 6,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 956, DateTimeKind.Utc).AddTicks(3065),
                            IsDeleted = false,
                            LanguageName = "Pashto"
                        },
                        new
                        {
                            LanguageId = 7,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 956, DateTimeKind.Utc).AddTicks(3066),
                            IsDeleted = false,
                            LanguageName = "Russian"
                        },
                        new
                        {
                            LanguageId = 8,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 956, DateTimeKind.Utc).AddTicks(3068),
                            IsDeleted = false,
                            LanguageName = "Turkish"
                        },
                        new
                        {
                            LanguageId = 9,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 956, DateTimeKind.Utc).AddTicks(3069),
                            IsDeleted = false,
                            LanguageName = "Turkmani"
                        },
                        new
                        {
                            LanguageId = 10,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 956, DateTimeKind.Utc).AddTicks(3086),
                            IsDeleted = false,
                            LanguageName = "Urdu"
                        },
                        new
                        {
                            LanguageId = 11,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 956, DateTimeKind.Utc).AddTicks(3088),
                            IsDeleted = false,
                            LanguageName = "Uzbek"
                        });
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.LeaveReasonDetail", b =>
                {
                    b.Property<int>("LeaveReasonId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("ReasonName")
                        .HasMaxLength(50);

                    b.Property<int>("Unit");

                    b.HasKey("LeaveReasonId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("LeaveReasonDetail");

                    b.HasData(
                        new
                        {
                            LeaveReasonId = 1,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 956, DateTimeKind.Utc).AddTicks(5208),
                            IsDeleted = false,
                            ReasonName = "Casual Leave",
                            Unit = 12
                        },
                        new
                        {
                            LeaveReasonId = 2,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 956, DateTimeKind.Utc).AddTicks(6042),
                            IsDeleted = false,
                            ReasonName = "Emergency Leave",
                            Unit = 6
                        },
                        new
                        {
                            LeaveReasonId = 3,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 956, DateTimeKind.Utc).AddTicks(6055),
                            IsDeleted = false,
                            ReasonName = "Maternity Leave",
                            Unit = 90
                        });
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.LoggerDetails", b =>
                {
                    b.Property<int>("LoggerDetailsId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<bool>("IsRead");

                    b.Property<string>("LoggedDetail");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("NotificationId");

                    b.Property<string>("UserName");

                    b.HasKey("LoggerDetailsId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("LoggerDetails");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Marketing.ActivityType", b =>
                {
                    b.Property<long>("ActivityTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ActivityName");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("ActivityTypeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("ActivityTypes");

                    b.HasData(
                        new
                        {
                            ActivityTypeId = 1L,
                            ActivityName = "Broadcasting",
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 956, DateTimeKind.Utc).AddTicks(8066),
                            IsDeleted = false
                        },
                        new
                        {
                            ActivityTypeId = 2L,
                            ActivityName = "Production",
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 956, DateTimeKind.Utc).AddTicks(8616),
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Marketing.Category", b =>
                {
                    b.Property<long>("CategoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CategoryName");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("CategoryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Marketing.Channel", b =>
                {
                    b.Property<long>("ChannelId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ChannelName");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<long?>("MediumId");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("ChannelId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("MediumId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Channel");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Marketing.ClientDetails", b =>
                {
                    b.Property<long>("ClientId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("CategoryId");

                    b.Property<string>("ClientBackground");

                    b.Property<string>("ClientCode");

                    b.Property<string>("ClientName");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Email");

                    b.Property<string>("FocalPoint");

                    b.Property<string>("History");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Phone");

                    b.Property<string>("PhysicialAddress");

                    b.Property<string>("Position");

                    b.HasKey("ClientId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("ClientDetails");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Marketing.ContractDetails", b =>
                {
                    b.Property<long>("ContractId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("ActivityTypeId");

                    b.Property<long?>("ClientId");

                    b.Property<string>("ClientName");

                    b.Property<string>("ContractCode");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("CurrencyId");

                    b.Property<DateTime>("EndDate");

                    b.Property<bool>("IsApproved");

                    b.Property<bool>("IsCompleted");

                    b.Property<bool>("IsDeclined");

                    b.Property<bool?>("IsDeleted");

                    b.Property<int?>("LanguageDetailLanguageId");

                    b.Property<long?>("LanguageId");

                    b.Property<long?>("MediaCategoryId");

                    b.Property<long?>("MediumId");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long?>("NatureId");

                    b.Property<long?>("QualityId");

                    b.Property<DateTime>("StartDate");

                    b.Property<long?>("TimeCategoryId");

                    b.Property<double>("UnitRate");

                    b.Property<long?>("UnitRateId");

                    b.HasKey("ContractId");

                    b.HasIndex("ActivityTypeId");

                    b.HasIndex("ClientId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("LanguageDetailLanguageId");

                    b.HasIndex("MediaCategoryId");

                    b.HasIndex("MediumId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("NatureId");

                    b.HasIndex("QualityId");

                    b.HasIndex("TimeCategoryId");

                    b.HasIndex("UnitRateId");

                    b.ToTable("ContractDetails");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Marketing.InvoiceApproval", b =>
                {
                    b.Property<long>("InvoiceApprovalId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<bool>("IsInvoiceApproved");

                    b.Property<long?>("JobId");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("InvoiceApprovalId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("JobId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("InvoiceApproval");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Marketing.InvoiceGeneration", b =>
                {
                    b.Property<long>("InvoiceId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("CurrencyDetailsCurrencyId");

                    b.Property<long?>("CurrencyId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<long?>("JobId");

                    b.Property<long?>("JobPrice");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long?>("PlayoutMinutes");

                    b.Property<long?>("TotalMinutes");

                    b.Property<double?>("TotalPrice");

                    b.HasKey("InvoiceId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CurrencyDetailsCurrencyId");

                    b.HasIndex("JobId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("InvoiceGeneration");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Marketing.JobDetails", b =>
                {
                    b.Property<long>("JobId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("ContractId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<DateTime>("EndDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsAgreementApproved");

                    b.Property<bool>("IsApproved");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("JobCode");

                    b.Property<string>("JobName");

                    b.Property<long?>("JobPhaseId");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("JobId");

                    b.HasIndex("ContractId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("JobPhaseId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("JobDetails");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Marketing.JobPhase", b =>
                {
                    b.Property<long>("JobPhaseId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Phase");

                    b.HasKey("JobPhaseId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("JobPhases");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Marketing.JobPriceDetails", b =>
                {
                    b.Property<long>("JobPriceId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<double>("Discount");

                    b.Property<float>("DiscountPercent");

                    b.Property<double>("FinalPrice");

                    b.Property<double>("FinalRate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<bool>("IsInvoiceApproved");

                    b.Property<long>("JobId");

                    b.Property<long>("Minutes");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<double>("TotalPrice");

                    b.Property<double>("UnitRate");

                    b.Property<int>("Units");

                    b.HasKey("JobPriceId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("JobId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("JobPriceDetails");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Marketing.Language", b =>
                {
                    b.Property<long>("LanguageId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("LanguageName");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("LanguageId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Marketing.MediaCategory", b =>
                {
                    b.Property<long>("MediaCategoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CategoryName");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("MediaCategoryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("MediaCategories");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Marketing.Medium", b =>
                {
                    b.Property<long>("MediumId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("MediumName");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("MediumId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Mediums");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Marketing.Nature", b =>
                {
                    b.Property<long>("NatureId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("NatureName");

                    b.HasKey("NatureId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Natures");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Marketing.PlayoutMinutes", b =>
                {
                    b.Property<long>("PlayoutMinuteId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<long?>("DroppedMinutes");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long?>("ScheduleId");

                    b.Property<long?>("TotalMinutes");

                    b.HasKey("PlayoutMinuteId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ScheduleId");

                    b.ToTable("PlayoutMinutes");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Marketing.PolicyDaySchedule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool>("Friday");

                    b.Property<bool>("IsActive");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<bool>("Monday");

                    b.Property<long?>("PolicyId");

                    b.Property<bool>("Saturday");

                    b.Property<bool>("Sunday");

                    b.Property<bool>("Thursday");

                    b.Property<bool>("Tuesday");

                    b.Property<bool>("Wednesday");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("PolicyId");

                    b.ToTable("PolicyDaySchedules");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Marketing.PolicyDetail", b =>
                {
                    b.Property<long>("PolicyId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<DateTime>("EndDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool?>("IsDeleted");

                    b.Property<long?>("LanguageId");

                    b.Property<int?>("LanguagesLanguageId");

                    b.Property<long?>("MediaCategoryId");

                    b.Property<long?>("MediumId");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("PolicyCode");

                    b.Property<string>("PolicyName");

                    b.Property<long?>("ProducerId");

                    b.Property<string>("RepeatDays");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("PolicyId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("LanguagesLanguageId");

                    b.HasIndex("MediaCategoryId");

                    b.HasIndex("MediumId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProducerId");

                    b.ToTable("PolicyDetails");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Marketing.PolicyOrderSchedule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<DateTime>("EndDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long?>("PolicyId");

                    b.Property<bool>("RequestSchedule");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("PolicyId");

                    b.ToTable("PolicyOrderSchedules");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Marketing.PolicySchedule", b =>
                {
                    b.Property<long>("PolicyScheduleId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ByDay");

                    b.Property<int?>("ByMonth");

                    b.Property<int?>("ByWeek");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<DateTime>("EndDate");

                    b.Property<TimeSpan>("EndTime");

                    b.Property<int?>("Frequency");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long?>("PolicyId");

                    b.Property<string>("RepeatDays");

                    b.Property<string>("ScheduleCode");

                    b.Property<DateTime>("StartDate");

                    b.Property<TimeSpan>("StartTime");

                    b.Property<string>("Title");

                    b.Property<bool>("isActive");

                    b.Property<bool>("isDeleted");

                    b.HasKey("PolicyScheduleId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("PolicyId");

                    b.ToTable("PolicySchedules");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Marketing.PolicyTimeSchedule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<TimeSpan>("EndTime");

                    b.Property<bool>("IsActive");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long?>("PolicyId");

                    b.Property<TimeSpan>("StartTime");

                    b.Property<string>("TimeScheduleCode");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("PolicyId");

                    b.ToTable("PolicyTimeSchedules");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Marketing.Producer", b =>
                {
                    b.Property<long>("ProducerId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("ProducerName");

                    b.HasKey("ProducerId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Producers");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Marketing.Quality", b =>
                {
                    b.Property<long>("QualityId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("QualityName");

                    b.HasKey("QualityId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Qualities");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Marketing.ScheduleDetails", b =>
                {
                    b.Property<long>("ScheduleId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("ChannelId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<DateTime>("EndDate");

                    b.Property<TimeSpan>("EndTime");

                    b.Property<bool>("Friday");

                    b.Property<bool>("IsActive");

                    b.Property<bool?>("IsDeleted");

                    b.Property<long?>("JobId");

                    b.Property<long?>("MediumId");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<bool>("Monday");

                    b.Property<long?>("PolicyId");

                    b.Property<long?>("ProjectId");

                    b.Property<bool>("Saturday");

                    b.Property<string>("ScheduleCode");

                    b.Property<string>("ScheduleName");

                    b.Property<string>("ScheduleType");

                    b.Property<DateTime>("StartDate");

                    b.Property<TimeSpan>("StartTime");

                    b.Property<bool>("Sunday");

                    b.Property<bool>("Thursday");

                    b.Property<bool>("Tuesday");

                    b.Property<bool>("Wednesday");

                    b.HasKey("ScheduleId");

                    b.HasIndex("ChannelId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("JobId");

                    b.HasIndex("MediumId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("PolicyId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ScheduleDetails");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Marketing.TimeCategory", b =>
                {
                    b.Property<long>("TimeCategoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("TimeCategoryName");

                    b.HasKey("TimeCategoryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("TimeCategories");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Marketing.UnitRate", b =>
                {
                    b.Property<long>("UnitRateId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("ActivityTypeId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("CurrencyDetailsCurrencyId");

                    b.Property<long?>("CurrencyId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<long?>("MediaCategoryId");

                    b.Property<long?>("MediumId");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long?>("NatureId");

                    b.Property<long?>("QualityId");

                    b.Property<long?>("TimeCategoryId");

                    b.Property<double>("UnitRates");

                    b.HasKey("UnitRateId");

                    b.HasIndex("ActivityTypeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CurrencyDetailsCurrencyId");

                    b.HasIndex("MediaCategoryId");

                    b.HasIndex("MediumId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("NatureId");

                    b.HasIndex("QualityId");

                    b.HasIndex("TimeCategoryId");

                    b.ToTable("UnitRates");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.NationalityDetails", b =>
                {
                    b.Property<int>("NationalityId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("NationalityName")
                        .HasMaxLength(100);

                    b.HasKey("NationalityId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("NationalityDetails");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.NotesMaster", b =>
                {
                    b.Property<int>("NoteId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AccountTypeId");

                    b.Property<int>("BlanceType");

                    b.Property<long>("ChartOfAccountNewId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int>("FinancialReportTypeId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Narration");

                    b.Property<int>("Notes");

                    b.HasKey("NoteId");

                    b.HasIndex("AccountTypeId");

                    b.HasIndex("ChartOfAccountNewId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("NotesMaster");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.OfficeDetail", b =>
                {
                    b.Property<int>("OfficeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("FaxNo")
                        .HasMaxLength(50);

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("OfficeCode")
                        .HasMaxLength(5);

                    b.Property<string>("OfficeKey");

                    b.Property<string>("OfficeName")
                        .HasMaxLength(100);

                    b.Property<string>("PhoneNo")
                        .HasMaxLength(50);

                    b.Property<string>("SupervisorName")
                        .HasMaxLength(100);

                    b.HasKey("OfficeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("OfficeDetail");

                    b.HasData(
                        new
                        {
                            OfficeId = 1,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(5295),
                            IsDeleted = false,
                            OfficeCode = "A0001",
                            OfficeKey = "AF",
                            OfficeName = "Afghanistan"
                        });
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.OrderSchedulePermission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<bool>("OrderSchedule");

                    b.Property<int>("PageId");

                    b.Property<string>("RoleId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("PageId");

                    b.ToTable("OrderSchedulePermission");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.PensionDebitAccountMaster", b =>
                {
                    b.Property<int>("PensionDebitAccountId")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("ChartOfAccountNewId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("PensionDebitAccountId");

                    b.HasIndex("ChartOfAccountNewId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("PensionDebitAccountMaster");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.PensionPaymentHistory", b =>
                {
                    b.Property<int>("PensionPaymentId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int>("EmployeeId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<decimal>("PaymentAmount");

                    b.Property<DateTime>("PaymentDate");

                    b.Property<long>("VoucherNo");

                    b.Property<string>("VoucherReferenceNo");

                    b.HasKey("PensionPaymentId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("VoucherNo");

                    b.ToTable("PensionPaymentHistory");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Permissions", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<bool>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("Permissions");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.PermissionsInRoles", b =>
                {
                    b.Property<string>("RoleId");

                    b.Property<string>("PermissionId");

                    b.Property<bool>("CanEdit");

                    b.Property<bool>("CanView");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CurrentPermissionId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<bool>("IsGrant");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("ModuleId");

                    b.Property<int?>("PageId");

                    b.Property<int>("PermissionsInRolesId")
                        .ValueGeneratedOnAdd();

                    b.HasKey("RoleId", "PermissionId");

                    b.HasAlternateKey("PermissionId", "PermissionsInRolesId", "RoleId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("PermissionsInRoles");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.ProfessionDetails", b =>
                {
                    b.Property<int>("ProfessionId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("ProfessionDari");

                    b.Property<string>("ProfessionName")
                        .HasMaxLength(100);

                    b.HasKey("ProfessionId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("ProfessionDetails");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.ActivityDocumentsDetail", b =>
                {
                    b.Property<long>("ActtivityDocumentId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ActivityDocumentsFilePath");

                    b.Property<long>("ActivityId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long?>("MonitoringId");

                    b.Property<int?>("StatusId");

                    b.HasKey("ActtivityDocumentId");

                    b.HasIndex("ActivityId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("StatusId");

                    b.ToTable("ActivityDocumentsDetail");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.ActivityStatusDetail", b =>
                {
                    b.Property<int>("StatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("serial");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("StatusName");

                    b.HasKey("StatusId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("ActivityStatusDetail");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.ApproveProjectDetails", b =>
                {
                    b.Property<long>("ApproveProjrctId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CommentText");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("FileName");

                    b.Property<string>("FilePath");

                    b.Property<bool?>("IsApproved");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long>("ProjectId");

                    b.Property<DateTime?>("ReviewCompletionDate");

                    b.Property<byte[]>("UploadedFile");

                    b.HasKey("ApproveProjrctId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.ToTable("ApproveProjectDetails");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.AreaDetail", b =>
                {
                    b.Property<long>("AreaId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AreaCode");

                    b.Property<string>("AreaName");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("AreaId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("AreaDetail");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.CEAgeGroupDetail", b =>
                {
                    b.Property<long>("AgeGroupOtherDetailId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name");

                    b.Property<long>("ProjectId");

                    b.HasKey("AgeGroupOtherDetailId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.ToTable("CEAgeGroupDetail");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.CEAssumptionDetail", b =>
                {
                    b.Property<long>("AssumptionDetailId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name");

                    b.Property<long>("ProjectId");

                    b.HasKey("AssumptionDetailId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.ToTable("CEAssumptionDetail");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.CEFeasibilityExpertOtherDetail", b =>
                {
                    b.Property<long>("ExpertOtherDetailId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name");

                    b.Property<long>("ProjectId");

                    b.HasKey("ExpertOtherDetailId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.ToTable("CEFeasibilityExpertOtherDetail");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.CEOccupationDetail", b =>
                {
                    b.Property<long>("OccupationOtherDetailId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name");

                    b.Property<long>("ProjectId");

                    b.HasKey("OccupationOtherDetailId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.ToTable("CEOccupationDetail");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.CountryMultiSelectDetails", b =>
                {
                    b.Property<long>("CountryMultiSelectId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CountryId");

                    b.Property<long?>("CountrySelectionId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long>("ProjectId");

                    b.HasKey("CountryMultiSelectId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.ToTable("CountryMultiSelectDetails");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.DistrictMultiSelect", b =>
                {
                    b.Property<long>("DistrictMultiSelectId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<long>("DistrictID");

                    b.Property<long?>("DistrictSelectionId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long>("ProjectId");

                    b.Property<int>("ProvinceId");

                    b.HasKey("DistrictMultiSelectId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DistrictID");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("DistrictMultiSelect");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.DonorCriteriaDetails", b =>
                {
                    b.Property<long>("DonorCEId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("Accountability");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("CriticismPerformance");

                    b.Property<bool?>("DeliverableQuality");

                    b.Property<bool?>("Dispute");

                    b.Property<int?>("DonorFinancingHistory");

                    b.Property<bool?>("EffectiveCommunication");

                    b.Property<bool?>("FundsOnTime");

                    b.Property<bool?>("IsDeleted");

                    b.Property<int?>("MethodOfFunding");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<bool?>("MoneyAllocation");

                    b.Property<bool?>("OtherDeliverable");

                    b.Property<string>("OtherDeliverableType");

                    b.Property<bool?>("PastFundingExperience");

                    b.Property<bool?>("PastWorkingExperience");

                    b.Property<int?>("PoliticalStanding");

                    b.Property<bool?>("Professional");

                    b.Property<long>("ProjectId");

                    b.Property<bool?>("ProposalAccepted");

                    b.Property<bool?>("ProposalExperience");

                    b.Property<int?>("ReligiousStanding");

                    b.Property<bool?>("TimeManagement");

                    b.HasKey("DonorCEId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.ToTable("DonorCriteriaDetail");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.DonorEligibilityCriteria", b =>
                {
                    b.Property<long>("DonorEligibilityDetailId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name");

                    b.Property<long>("ProjectId");

                    b.HasKey("DonorEligibilityDetailId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.ToTable("DonorEligibilityCriteria");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.EligibilityCriteriaDetail", b =>
                {
                    b.Property<long>("EligibilityId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("CoPartnership");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("DonorCriteriaMet");

                    b.Property<bool?>("EligibilityDealine");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long>("ProjectId");

                    b.HasKey("EligibilityId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.ToTable("EligibilityCriteriaDetail");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.FeasibilityCriteriaDetail", b =>
                {
                    b.Property<long>("FeasibilityId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("AnyInKindComponent");

                    b.Property<bool?>("ByEquipment");

                    b.Property<bool?>("CapacityAvailableForProject");

                    b.Property<double?>("CostOfCompensationMoney");

                    b.Property<int?>("CostOfCompensationMonth");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("EnoughTimeForProject");

                    b.Property<bool?>("EnoughTimeToPrepareProposal");

                    b.Property<bool?>("ExpandScope");

                    b.Property<bool?>("FeasibilityExpert");

                    b.Property<bool?>("FeasibleExpertDeploy");

                    b.Property<bool?>("GeoGraphicalPresence");

                    b.Property<bool?>("IsCostGreaterthenBudget");

                    b.Property<bool?>("IsDeleted");

                    b.Property<bool?>("IsFinancialContribution");

                    b.Property<bool?>("IsGeographical");

                    b.Property<bool?>("IsProjectPractical");

                    b.Property<bool?>("IsSeasonal");

                    b.Property<bool?>("IsSecurity");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("PerCostGreaterthenBudget");

                    b.Property<bool?>("PresenceCoverageInProject");

                    b.Property<bool?>("ProjectAllowedBylaw");

                    b.Property<bool?>("ProjectByLeadership");

                    b.Property<long>("ProjectId");

                    b.Property<bool?>("ProjectInLineWithOrgFocus");

                    b.Property<double?>("ProjectRealCost");

                    b.Property<bool?>("ThirdPartyContract");

                    b.Property<bool?>("TrainedStaff");

                    b.Property<bool?>("UseableByOrganisation");

                    b.HasKey("FeasibilityId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.ToTable("FeasibilityCriteriaDetail");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.FinancialCriteriaDetail", b =>
                {
                    b.Property<long>("FinancialCriteriaDetailId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<double?>("Lump_Sum");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<double?>("Operational");

                    b.Property<double?>("Overhead_Admin");

                    b.Property<double?>("ProjectActivities");

                    b.Property<long>("ProjectId");

                    b.Property<double?>("Total");

                    b.HasKey("FinancialCriteriaDetailId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.ToTable("FinancialCriteriaDetail");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.FinancialProjectDetail", b =>
                {
                    b.Property<long>("FinancialProjectDetailId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long>("ProjectId");

                    b.Property<string>("ProjectName");

                    b.Property<long?>("ProjectSelectionId");

                    b.HasKey("FinancialProjectDetailId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.ToTable("FinancialProjectDetail");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.GenderConsiderationDetail", b =>
                {
                    b.Property<long>("GenderConsiderationId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("GenderConsiderationName");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("GenderConsiderationId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("GenderConsiderationDetail");

                    b.HasData(
                        new
                        {
                            GenderConsiderationId = 1L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(8088),
                            GenderConsiderationName = "50 % F - 50 % M Excellent",
                            IsDeleted = false
                        },
                        new
                        {
                            GenderConsiderationId = 2L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(8421),
                            GenderConsiderationName = "40 % F - 60 % M Very Good",
                            IsDeleted = false
                        },
                        new
                        {
                            GenderConsiderationId = 3L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(8427),
                            GenderConsiderationName = "30 % F - 70 % M Good",
                            IsDeleted = false
                        },
                        new
                        {
                            GenderConsiderationId = 4L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(8428),
                            GenderConsiderationName = "25 % F - 75 % M Poor",
                            IsDeleted = false
                        },
                        new
                        {
                            GenderConsiderationId = 5L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(8429),
                            GenderConsiderationName = "20 % F - 80 % M Poor",
                            IsDeleted = false
                        },
                        new
                        {
                            GenderConsiderationId = 6L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(8430),
                            GenderConsiderationName = "10 % F - 90 % M Poor",
                            IsDeleted = false
                        },
                        new
                        {
                            GenderConsiderationId = 7L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(8431),
                            GenderConsiderationName = "5 % F - 95 % M Poor",
                            IsDeleted = false
                        },
                        new
                        {
                            GenderConsiderationId = 8L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(8432),
                            GenderConsiderationName = "0 % F - 100 % M Poor",
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.HiringRequestCandidates", b =>
                {
                    b.Property<long>("CandidateId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("EmployeeID");

                    b.Property<long>("HiringRequestId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<bool>("IsSelected");

                    b.Property<bool>("IsShortListed");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("CandidateId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("HiringRequestId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("HiringRequestCandidates");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.PriorityCriteriaDetail", b =>
                {
                    b.Property<long>("PriorityCriteriaDetailId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("CoverageAreaExpansion");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("ExpansionGoal");

                    b.Property<bool?>("FillingFundingGap");

                    b.Property<bool?>("GoodCause");

                    b.Property<bool?>("ImproveDonorRelationship");

                    b.Property<bool?>("ImprovePerformancecapacity");

                    b.Property<bool?>("IncreaseEligibility");

                    b.Property<bool?>("IncreaseReputation");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<bool?>("NewEquipment");

                    b.Property<bool?>("NewSoftware");

                    b.Property<bool?>("NewTraining");

                    b.Property<long>("ProjectId");

                    b.Property<bool?>("SkillImprove");

                    b.HasKey("PriorityCriteriaDetailId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.ToTable("PriorityCriteriaDetail");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.PriorityOtherDetail", b =>
                {
                    b.Property<long>("PriorityOtherDetailId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name");

                    b.Property<long>("ProjectId");

                    b.HasKey("PriorityOtherDetailId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.ToTable("PriorityOtherDetail");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.ProgramDetail", b =>
                {
                    b.Property<long>("ProgramId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("ProgramCode");

                    b.Property<string>("ProgramName");

                    b.Property<long>("ProjectId");

                    b.HasKey("ProgramId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("ProgramDetail");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.ProjectActivitiesControl", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long>("ProjectId");

                    b.Property<int>("RoleId");

                    b.Property<int>("UserID");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserID");

                    b.ToTable("ProjectActivitiesControl");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.ProjectActivityDetail", b =>
                {
                    b.Property<long>("ActivityId")
                        .ValueGeneratedOnAdd();

                    b.Property<float?>("Achieved");

                    b.Property<string>("ActivityDescription");

                    b.Property<string>("ActivityName")
                        .HasMaxLength(200);

                    b.Property<DateTime?>("ActualEndDate");

                    b.Property<DateTime?>("ActualStartDate");

                    b.Property<long?>("BudgetLineId");

                    b.Property<string>("ChallengesAndSolutions");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("EmployeeID");

                    b.Property<bool>("IsCompleted");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long?>("ParentId");

                    b.Property<DateTime?>("PlannedEndDate");

                    b.Property<DateTime?>("PlannedStartDate");

                    b.Property<int>("RecurrinTypeId");

                    b.Property<bool?>("Recurring");

                    b.Property<int?>("RecurringCount");

                    b.Property<int?>("StatusId");

                    b.Property<string>("SubActivityTitle");

                    b.Property<float?>("Target");

                    b.HasKey("ActivityId");

                    b.HasIndex("BudgetLineId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ParentId");

                    b.HasIndex("StatusId");

                    b.ToTable("ProjectActivityDetail");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.ProjectActivityExtensions", b =>
                {
                    b.Property<long>("ExtensionId")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("ActivityId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(200);

                    b.Property<DateTime>("EndDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("ExtensionId");

                    b.HasIndex("ActivityId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("ProjectActivityExtensions");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.ProjectActivityProvinceDetail", b =>
                {
                    b.Property<long>("ActivityProvinceId")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("ActivityId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<long?>("DistrictID");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("ProvinceId");

                    b.HasKey("ActivityProvinceId");

                    b.HasIndex("ActivityId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("DistrictID");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProvinceId");

                    b.ToTable("ProjectActivityProvinceDetail");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.ProjectArea", b =>
                {
                    b.Property<long>("ProjectAreaId")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("AreaId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long>("ProjectId");

                    b.HasKey("ProjectAreaId");

                    b.HasIndex("AreaId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectArea");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.ProjectAssignTo", b =>
                {
                    b.Property<long>("ProjectAssignToId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int>("EmployeeId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long>("ProjectId");

                    b.HasKey("ProjectAssignToId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectAssignTo");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.ProjectBudgetLine", b =>
                {
                    b.Property<long>("BudgetLineId")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("AmountPayable");

                    b.Property<double>("AmountReceivable");

                    b.Property<int?>("BudgetLineTypeId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<DateTime>("EndDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long>("ProjectId");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("BudgetLineId");

                    b.HasIndex("BudgetLineTypeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectBudgetLine");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.ProjectBudgetLineDetail", b =>
                {
                    b.Property<long>("BudgetLineId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BudgetCode");

                    b.Property<string>("BudgetName");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("CurrencyId");

                    b.Property<double?>("InitialBudget");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long?>("ProjectId");

                    b.Property<long?>("ProjectJobId");

                    b.HasKey("BudgetLineId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectJobId");

                    b.ToTable("ProjectBudgetLineDetail");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.ProjectCommunication", b =>
                {
                    b.Property<long>("PCId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("ProjectDescription");

                    b.Property<long>("ProjectId");

                    b.HasKey("PCId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectCommunication");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.ProjectCommunicationAttachment", b =>
                {
                    b.Property<long>("PCAId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("FileName");

                    b.Property<string>("FilePath");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long>("PCId");

                    b.Property<long>("ProjectId");

                    b.HasKey("PCAId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("PCId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectCommunicationAttachment");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.ProjectDetail", b =>
                {
                    b.Property<long>("ProjectId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("DirectorId");

                    b.Property<DateTime?>("EndDate");

                    b.Property<bool>("IsActive");

                    b.Property<bool?>("IsCriteriaEvaluationSubmit");

                    b.Property<bool?>("IsDeleted");

                    b.Property<bool?>("IsProposalComplate");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("ProjectCode");

                    b.Property<string>("ProjectDescription");

                    b.Property<string>("ProjectName");

                    b.Property<long?>("ProjectPhaseDetailsId");

                    b.Property<int?>("ReviewerId");

                    b.Property<DateTime?>("StartDate");

                    b.HasKey("ProjectId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectPhaseDetailsId");

                    b.ToTable("ProjectDetail");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.ProjectDetails", b =>
                {
                    b.Property<long>("ProjectId")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("Budget");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("CurrencyId");

                    b.Property<double?>("CurrentBalance");

                    b.Property<string>("Description");

                    b.Property<DateTime>("EndDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<double?>("PayableAmount");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<double?>("ReceivableAmount");

                    b.Property<DateTime>("StartDate");

                    b.Property<int?>("Status");

                    b.HasKey("ProjectId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("ProjectDetails");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.ProjectHiringControl", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long>("ProjectId");

                    b.Property<int>("RoleId");

                    b.Property<int>("UserID");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserID");

                    b.ToTable("ProjectHiringControl");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.ProjectHiringRequestDetail", b =>
                {
                    b.Property<long>("HiringRequestId")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("BasicPay");

                    b.Property<long?>("BudgetLineId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("CurrencyId");

                    b.Property<string>("Description");

                    b.Property<int?>("EmployeeID");

                    b.Property<int?>("FilledVacancies");

                    b.Property<int?>("GradeId");

                    b.Property<string>("HiringRequestCode");

                    b.Property<bool>("IsCompleted");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("OfficeId");

                    b.Property<string>("Position");

                    b.Property<int?>("ProfessionId");

                    b.Property<long?>("ProjectId");

                    b.Property<int?>("TotalVacancies");

                    b.HasKey("HiringRequestId");

                    b.HasIndex("BudgetLineId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("EmployeeID");

                    b.HasIndex("GradeId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("OfficeId");

                    b.HasIndex("ProfessionId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectHiringRequestDetail");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.ProjectIndicatorQuestions", b =>
                {
                    b.Property<long>("IndicatorQuestionId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("IndicatorQuestion");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long>("ProjectIndicatorId");

                    b.HasKey("IndicatorQuestionId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectIndicatorId");

                    b.ToTable("ProjectIndicatorQuestions");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.ProjectIndicators", b =>
                {
                    b.Property<long>("ProjectIndicatorId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("IndicatorCode");

                    b.Property<string>("IndicatorName");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("ProjectIndicatorId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("ProjectIndicators");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.ProjectJobDetail", b =>
                {
                    b.Property<long>("ProjectJobId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long>("ProjectId");

                    b.Property<string>("ProjectJobCode");

                    b.Property<string>("ProjectJobName");

                    b.HasKey("ProjectJobId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectJobDetail");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.ProjectLogisticsControl", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long>("ProjectId");

                    b.Property<int>("RoleId");

                    b.Property<int>("UserID");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserID");

                    b.ToTable("ProjectLogisticsControl");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.ProjectMonitoringIndicatorDetail", b =>
                {
                    b.Property<long>("MonitoringIndicatorId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long>("ProjectIndicatorId");

                    b.Property<long>("ProjectMonitoringReviewId");

                    b.HasKey("MonitoringIndicatorId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectIndicatorId");

                    b.HasIndex("ProjectMonitoringReviewId");

                    b.ToTable("ProjectMonitoringIndicatorDetail");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.ProjectMonitoringIndicatorQuestions", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long>("MonitoringIndicatorId");

                    b.Property<long>("QuestionId");

                    b.Property<int?>("Score");

                    b.Property<string>("Verification");

                    b.Property<int?>("VerificationId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("MonitoringIndicatorId");

                    b.HasIndex("QuestionId");

                    b.ToTable("ProjectMonitoringIndicatorQuestions");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.ProjectMonitoringReviewDetail", b =>
                {
                    b.Property<long>("ProjectMonitoringReviewId")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("ActivityId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<DateTime?>("MonitoringDate");

                    b.Property<string>("NegativePoints");

                    b.Property<string>("PostivePoints");

                    b.Property<long>("ProjectId");

                    b.Property<string>("Recommendations");

                    b.Property<string>("Remarks");

                    b.HasKey("ProjectMonitoringReviewId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("ProjectMonitoringReviewDetail");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.ProjectOpportunityControl", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long>("ProjectId");

                    b.Property<int>("RoleId");

                    b.Property<int>("UserID");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserID");

                    b.ToTable("ProjectOpportunityControl");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.ProjectOtherDetail", b =>
                {
                    b.Property<long>("ProjectOtherDetailId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("CurrencyId");

                    b.Property<string>("DistrictID");

                    b.Property<long?>("DonorId");

                    b.Property<DateTime?>("EndDate");

                    b.Property<long?>("GenderConsiderationId");

                    b.Property<string>("GenderRemarks");

                    b.Property<int?>("InDirectBeneficiaryFemale");

                    b.Property<int?>("InDirectBeneficiaryMale");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("OfficeId");

                    b.Property<int?>("OpportunityType");

                    b.Property<long>("ProjectId");

                    b.Property<string>("ProvinceId");

                    b.Property<DateTime?>("REOIReceiveDate");

                    b.Property<string>("SecurityConsiderationId");

                    b.Property<long?>("SecurityId");

                    b.Property<string>("SecurityRemarks");

                    b.Property<DateTime?>("StartDate");

                    b.Property<long?>("StrengthConsiderationId");

                    b.Property<DateTime?>("SubmissionDate");

                    b.Property<int?>("beneficiaryFemale");

                    b.Property<int?>("beneficiaryMale");

                    b.Property<string>("budget");

                    b.Property<string>("mainActivities");

                    b.Property<string>("opportunity");

                    b.Property<string>("opportunityNo");

                    b.Property<string>("opportunitydescription");

                    b.Property<string>("projectGoal");

                    b.Property<string>("projectObjective");

                    b.HasKey("ProjectOtherDetailId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectOtherDetail");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.ProjectPhaseDetails", b =>
                {
                    b.Property<long>("ProjectPhaseDetailsId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("ProjectPhase");

                    b.HasKey("ProjectPhaseDetailsId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("ProjectPhaseDetails");

                    b.HasData(
                        new
                        {
                            ProjectPhaseDetailsId = 1L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 956, DateTimeKind.Utc).AddTicks(6750),
                            IsDeleted = false,
                            ProjectPhase = "Data Entry"
                        });
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.ProjectPhaseTime", b =>
                {
                    b.Property<long>("ProjectPhaseTimeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<DateTime?>("PhaseEndDate");

                    b.Property<DateTime?>("PhaseStartData");

                    b.Property<long>("ProjectId");

                    b.Property<long>("ProjectPhaseDetailsId");

                    b.HasKey("ProjectPhaseTimeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProjectPhaseDetailsId");

                    b.ToTable("ProjectPhaseTime");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.ProjectProgram", b =>
                {
                    b.Property<long>("ProjectProgramId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long>("ProgramId");

                    b.Property<long>("ProjectId");

                    b.HasKey("ProjectProgramId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProgramId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectProgram");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.ProjectProposalDetail", b =>
                {
                    b.Property<long>("ProjectProposaldetailId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BudgetFileExtType");

                    b.Property<string>("BudgetFileId");

                    b.Property<string>("BudgetFileName");

                    b.Property<string>("BudgetFileWebLink");

                    b.Property<string>("ConceptFileExtType");

                    b.Property<string>("ConceptFileId");

                    b.Property<string>("ConceptFileName");

                    b.Property<string>("ConceptFileWebLink");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int?>("CurrencyId");

                    b.Property<string>("EDIFileExtType");

                    b.Property<string>("EDIFileName");

                    b.Property<string>("EDIFileWebLink");

                    b.Property<string>("EdiFileId");

                    b.Property<string>("FolderId");

                    b.Property<string>("FolderName");

                    b.Property<bool?>("IsDeleted");

                    b.Property<bool?>("IsProposalAccept");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("PresentationExtType");

                    b.Property<string>("PresentationFileId");

                    b.Property<string>("PresentationFileName");

                    b.Property<string>("PresentationFileWebLink");

                    b.Property<int?>("ProjectAssignTo");

                    b.Property<long>("ProjectId");

                    b.Property<double?>("ProposalBudget");

                    b.Property<DateTime?>("ProposalDueDate");

                    b.Property<string>("ProposalExtType");

                    b.Property<string>("ProposalFileId");

                    b.Property<string>("ProposalFileName");

                    b.Property<DateTime?>("ProposalStartDate");

                    b.Property<string>("ProposalWebLink");

                    b.Property<int?>("UserId");

                    b.HasKey("ProjectProposaldetailId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectProposalDetail");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.ProjectSector", b =>
                {
                    b.Property<long>("ProjectSectorId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long>("ProjectId");

                    b.Property<long>("SectorId");

                    b.HasKey("ProjectSectorId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SectorId");

                    b.ToTable("ProjectSector");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.ProvinceMultiSelect", b =>
                {
                    b.Property<long>("ProvinceMultiSelectId")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("CountryMultiSelectId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long>("ProjectId");

                    b.Property<int>("ProvinceId");

                    b.Property<long?>("ProvinceSelectionId");

                    b.HasKey("ProvinceMultiSelectId");

                    b.HasIndex("CountryMultiSelectId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("ProvinceMultiSelect");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.PurposeofInitiativeCriteria", b =>
                {
                    b.Property<long>("ProductServiceId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("AcceleratedLearningProgram");

                    b.Property<bool?>("Advocacy");

                    b.Property<bool?>("AggriculutreCapacityBuilding");

                    b.Property<bool?>("Awareness");

                    b.Property<bool?>("CapacityBuilding");

                    b.Property<bool?>("Children");

                    b.Property<bool?>("CommunicableDisease");

                    b.Property<bool?>("CommunityBasedEducation");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("Disabled");

                    b.Property<bool?>("DisasterCapacityBuilding");

                    b.Property<bool?>("DisasterRiskHygiene");

                    b.Property<bool?>("EducationCapacityBuilding");

                    b.Property<bool?>("EducationInEmergency");

                    b.Property<bool?>("EmergencyResponse");

                    b.Property<bool?>("EnvironmentalHealth");

                    b.Property<bool?>("FoodSecurity");

                    b.Property<bool?>("HealthCapacityBuilding");

                    b.Property<bool?>("Horticulture");

                    b.Property<bool?>("Hygiene");

                    b.Property<bool?>("IDPs");

                    b.Property<bool?>("Immunization");

                    b.Property<bool?>("IncomeGeneration");

                    b.Property<bool?>("InfantandYoungChildFeeding");

                    b.Property<bool?>("Infrastructure");

                    b.Property<bool?>("Irrigation");

                    b.Property<bool?>("IsDeleted");

                    b.Property<bool?>("Kuchis");

                    b.Property<bool?>("Literacy");

                    b.Property<bool?>("Livelihood");

                    b.Property<bool?>("LivestockManagement");

                    b.Property<bool?>("Men");

                    b.Property<bool?>("MentalHealthandDisabilityService");

                    b.Property<bool?>("MitigationProjects");

                    b.Property<bool?>("Mobilization");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<bool?>("NaturalResourceManagement");

                    b.Property<bool?>("Nutrition");

                    b.Property<bool?>("OnlineEducation");

                    b.Property<bool?>("PeaceBuilding");

                    b.Property<bool?>("PrimaryHealthServices");

                    b.Property<long>("ProjectId");

                    b.Property<bool?>("RenewableEnergy");

                    b.Property<bool?>("ReproductiveHealth");

                    b.Property<bool?>("ResearchandPublication");

                    b.Property<bool?>("Returnees");

                    b.Property<bool?>("Sanitation");

                    b.Property<bool?>("SchoolUpgrading");

                    b.Property<bool?>("Shelter");

                    b.Property<bool?>("SocialProtection");

                    b.Property<bool?>("SustainableLivelihood");

                    b.Property<bool?>("Telemedicine");

                    b.Property<bool?>("ValueChain");

                    b.Property<bool?>("WaterSupply");

                    b.Property<bool?>("Widows");

                    b.Property<bool?>("Women");

                    b.Property<bool?>("Youth");

                    b.HasKey("ProductServiceId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.ToTable("PurposeofInitiativeCriteria");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.RiskCriteriaDetail", b =>
                {
                    b.Property<long>("RiskCriteriaDetailId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("Beneficiaries");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("Culture");

                    b.Property<int?>("CurrencyId");

                    b.Property<bool?>("DeliveryFaiLure");

                    b.Property<bool?>("DesctructionByTerroristActivity");

                    b.Property<bool?>("Ethinc");

                    b.Property<bool?>("Ethnicity");

                    b.Property<bool?>("Financiallosses");

                    b.Property<bool?>("FocusDivertingrisk");

                    b.Property<bool?>("Geographical");

                    b.Property<bool?>("GovernmentConfiscation");

                    b.Property<bool?>("Insecurity");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<bool?>("Opportunityloss");

                    b.Property<string>("OrganizationalDescription");

                    b.Property<bool?>("OtherOrganizationalHarms");

                    b.Property<bool?>("OverallOrganization");

                    b.Property<bool?>("PrematureSeizure");

                    b.Property<bool?>("Probablydelaysinfunding");

                    b.Property<bool?>("ProjectAssets");

                    b.Property<long>("ProjectId");

                    b.Property<string>("ProjectSelection");

                    b.Property<bool?>("Religious");

                    b.Property<bool?>("ReligiousBeliefs");

                    b.Property<bool?>("Reputation");

                    b.Property<bool?>("Season");

                    b.Property<bool?>("Sectarian");

                    b.Property<bool?>("Security");

                    b.Property<bool?>("Social");

                    b.Property<bool?>("Staff");

                    b.Property<bool?>("Suppliers");

                    b.Property<bool?>("Traditional");

                    b.HasKey("RiskCriteriaDetailId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.ToTable("RiskCriteriaDetail");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.SectorDetails", b =>
                {
                    b.Property<long>("SectorId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("SectorCode");

                    b.Property<string>("SectorName");

                    b.HasKey("SectorId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("SectorDetails");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.SecurityConsiderationDetail", b =>
                {
                    b.Property<long>("SecurityConsiderationId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("SecurityConsiderationName");

                    b.HasKey("SecurityConsiderationId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("SecurityConsiderationDetail");

                    b.HasData(
                        new
                        {
                            SecurityConsiderationId = 1L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(9467),
                            IsDeleted = false,
                            SecurityConsiderationName = "Project Staff Cannot Visit Project Site"
                        },
                        new
                        {
                            SecurityConsiderationId = 2L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(9795),
                            IsDeleted = false,
                            SecurityConsiderationName = "Beneficiaries cannot be reached"
                        },
                        new
                        {
                            SecurityConsiderationId = 3L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(9801),
                            IsDeleted = false,
                            SecurityConsiderationName = "Resources cannot be deployed"
                        },
                        new
                        {
                            SecurityConsiderationId = 4L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(9802),
                            IsDeleted = false,
                            SecurityConsiderationName = "Threat exit for future (Highly)"
                        },
                        new
                        {
                            SecurityConsiderationId = 5L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(9803),
                            IsDeleted = false,
                            SecurityConsiderationName = "Project staff access the are partially"
                        },
                        new
                        {
                            SecurityConsiderationId = 6L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(9804),
                            IsDeleted = false,
                            SecurityConsiderationName = "Bonfires can be reached partially"
                        },
                        new
                        {
                            SecurityConsiderationId = 7L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(9804),
                            IsDeleted = false,
                            SecurityConsiderationName = "Resources can be deployed partially"
                        },
                        new
                        {
                            SecurityConsiderationId = 8L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(9806),
                            IsDeleted = false,
                            SecurityConsiderationName = "Future Threats exits"
                        },
                        new
                        {
                            SecurityConsiderationId = 9L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(9807),
                            IsDeleted = false,
                            SecurityConsiderationName = "No barrier for staff to access the area"
                        },
                        new
                        {
                            SecurityConsiderationId = 10L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(9811),
                            IsDeleted = false,
                            SecurityConsiderationName = "No obstacle for deploying Resources & office"
                        },
                        new
                        {
                            SecurityConsiderationId = 11L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(9812),
                            IsDeleted = false,
                            SecurityConsiderationName = "Future Threats expected"
                        });
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.SecurityConsiderationMultiSelect", b =>
                {
                    b.Property<long>("SecurityConsiderationMultiSelectId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long>("ProjectId");

                    b.Property<long>("SecurityConsiderationId");

                    b.Property<long?>("SecurityConsiderationSelectedId");

                    b.HasKey("SecurityConsiderationMultiSelectId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SecurityConsiderationId");

                    b.ToTable("SecurityConsiderationMultiSelect");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.SecurityDetail", b =>
                {
                    b.Property<long>("SecurityId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("SecurityName");

                    b.HasKey("SecurityId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("SecurityDetail");

                    b.HasData(
                        new
                        {
                            SecurityId = 1L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(8787),
                            IsDeleted = false,
                            SecurityName = "Insecure"
                        },
                        new
                        {
                            SecurityId = 2L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(9116),
                            IsDeleted = false,
                            SecurityName = "Partially Insecure"
                        },
                        new
                        {
                            SecurityId = 3L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(9122),
                            IsDeleted = false,
                            SecurityName = "Secure (Green Area)"
                        });
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.StrengthConsiderationDetail", b =>
                {
                    b.Property<long>("StrengthConsiderationId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("StrengthConsiderationName");

                    b.HasKey("StrengthConsiderationId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("StrengthConsiderationDetail");

                    b.HasData(
                        new
                        {
                            StrengthConsiderationId = 1L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(7347),
                            IsDeleted = false,
                            StrengthConsiderationName = "Gender Friendly"
                        },
                        new
                        {
                            StrengthConsiderationId = 2L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(7687),
                            IsDeleted = false,
                            StrengthConsiderationName = "Not Gender Friendly"
                        },
                        new
                        {
                            StrengthConsiderationId = 3L,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(7694),
                            IsDeleted = false,
                            StrengthConsiderationName = "Not Applicable"
                        });
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.TargetBeneficiaryDetail", b =>
                {
                    b.Property<long>("TargetId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long>("ProjectId");

                    b.Property<string>("TargetName");

                    b.Property<int>("TargetType");

                    b.HasKey("TargetId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("TargetBeneficiaryDetail");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.WinProjectDetails", b =>
                {
                    b.Property<long>("WinProjectId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CommentText");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("FileName");

                    b.Property<string>("FilePath");

                    b.Property<bool?>("IsDeleted");

                    b.Property<bool?>("IsWin");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<long>("ProjectId");

                    b.Property<byte[]>("UploadedFile");

                    b.HasKey("WinProjectId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.ToTable("WinProjectDetails");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.ProvinceDetails", b =>
                {
                    b.Property<int>("ProvinceId")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CountryId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("ProvinceName")
                        .HasMaxLength(50);

                    b.HasKey("ProvinceId");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("ProvinceDetails");

                    b.HasData(
                        new
                        {
                            ProvinceId = 1,
                            CountryId = 1,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(886),
                            IsDeleted = false,
                            ProvinceName = "Badghis"
                        },
                        new
                        {
                            ProvinceId = 2,
                            CountryId = 1,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(1939),
                            IsDeleted = false,
                            ProvinceName = "Baghlan"
                        },
                        new
                        {
                            ProvinceId = 3,
                            CountryId = 1,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(1958),
                            IsDeleted = false,
                            ProvinceName = "Balkh"
                        },
                        new
                        {
                            ProvinceId = 4,
                            CountryId = 1,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(1960),
                            IsDeleted = false,
                            ProvinceName = "Bamyan"
                        },
                        new
                        {
                            ProvinceId = 5,
                            CountryId = 1,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(1961),
                            IsDeleted = false,
                            ProvinceName = "Daykundi"
                        },
                        new
                        {
                            ProvinceId = 6,
                            CountryId = 1,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(1963),
                            IsDeleted = false,
                            ProvinceName = "Farah"
                        },
                        new
                        {
                            ProvinceId = 7,
                            CountryId = 1,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(1964),
                            IsDeleted = false,
                            ProvinceName = "Faryab"
                        },
                        new
                        {
                            ProvinceId = 8,
                            CountryId = 1,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(1965),
                            IsDeleted = false,
                            ProvinceName = "Ghazni"
                        },
                        new
                        {
                            ProvinceId = 9,
                            CountryId = 1,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(1966),
                            IsDeleted = false,
                            ProvinceName = "Ghor"
                        },
                        new
                        {
                            ProvinceId = 10,
                            CountryId = 1,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(1967),
                            IsDeleted = false,
                            ProvinceName = "Helmand"
                        },
                        new
                        {
                            ProvinceId = 11,
                            CountryId = 1,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(1968),
                            IsDeleted = false,
                            ProvinceName = "Herat"
                        },
                        new
                        {
                            ProvinceId = 12,
                            CountryId = 1,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(1969),
                            IsDeleted = false,
                            ProvinceName = "Jowzjan"
                        },
                        new
                        {
                            ProvinceId = 13,
                            CountryId = 1,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(1971),
                            IsDeleted = false,
                            ProvinceName = "Kabul"
                        },
                        new
                        {
                            ProvinceId = 14,
                            CountryId = 1,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(1972),
                            IsDeleted = false,
                            ProvinceName = "Kandahar"
                        },
                        new
                        {
                            ProvinceId = 15,
                            CountryId = 1,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(1975),
                            IsDeleted = false,
                            ProvinceName = "Kapisa"
                        },
                        new
                        {
                            ProvinceId = 16,
                            CountryId = 1,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(1977),
                            IsDeleted = false,
                            ProvinceName = "Khost"
                        },
                        new
                        {
                            ProvinceId = 17,
                            CountryId = 1,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(1979),
                            IsDeleted = false,
                            ProvinceName = "Kunar"
                        },
                        new
                        {
                            ProvinceId = 18,
                            CountryId = 1,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(1979),
                            IsDeleted = false,
                            ProvinceName = "Kunduz"
                        },
                        new
                        {
                            ProvinceId = 19,
                            CountryId = 1,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(1982),
                            IsDeleted = false,
                            ProvinceName = "Laghman"
                        },
                        new
                        {
                            ProvinceId = 20,
                            CountryId = 1,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(1983),
                            IsDeleted = false,
                            ProvinceName = "Logar"
                        },
                        new
                        {
                            ProvinceId = 21,
                            CountryId = 1,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(1987),
                            IsDeleted = false,
                            ProvinceName = "Maidan Wardak"
                        },
                        new
                        {
                            ProvinceId = 22,
                            CountryId = 1,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(1987),
                            IsDeleted = false,
                            ProvinceName = "Nangarhar"
                        },
                        new
                        {
                            ProvinceId = 23,
                            CountryId = 1,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(1989),
                            IsDeleted = false,
                            ProvinceName = "Nimruz"
                        },
                        new
                        {
                            ProvinceId = 24,
                            CountryId = 1,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(1991),
                            IsDeleted = false,
                            ProvinceName = "Nuristan"
                        },
                        new
                        {
                            ProvinceId = 25,
                            CountryId = 1,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(1991),
                            IsDeleted = false,
                            ProvinceName = "Paktia"
                        },
                        new
                        {
                            ProvinceId = 26,
                            CountryId = 1,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(1993),
                            IsDeleted = false,
                            ProvinceName = "Paktika"
                        },
                        new
                        {
                            ProvinceId = 27,
                            CountryId = 1,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(1994),
                            IsDeleted = false,
                            ProvinceName = "Panjshir"
                        },
                        new
                        {
                            ProvinceId = 28,
                            CountryId = 1,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(1995),
                            IsDeleted = false,
                            ProvinceName = "Parwan"
                        },
                        new
                        {
                            ProvinceId = 29,
                            CountryId = 1,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(1997),
                            IsDeleted = false,
                            ProvinceName = "Samangan"
                        },
                        new
                        {
                            ProvinceId = 30,
                            CountryId = 1,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(1998),
                            IsDeleted = false,
                            ProvinceName = "Sar-e Pol"
                        },
                        new
                        {
                            ProvinceId = 31,
                            CountryId = 1,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(1999),
                            IsDeleted = false,
                            ProvinceName = "Takhar"
                        },
                        new
                        {
                            ProvinceId = 32,
                            CountryId = 1,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(2000),
                            IsDeleted = false,
                            ProvinceName = "Urozgan"
                        },
                        new
                        {
                            ProvinceId = 33,
                            CountryId = 1,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(2001),
                            IsDeleted = false,
                            ProvinceName = "Zabul"
                        },
                        new
                        {
                            ProvinceId = 34,
                            CountryId = 1,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(2002),
                            IsDeleted = false,
                            ProvinceName = "Alabama"
                        },
                        new
                        {
                            ProvinceId = 35,
                            CountryId = 2,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(2003),
                            IsDeleted = false,
                            ProvinceName = "Alaska"
                        },
                        new
                        {
                            ProvinceId = 36,
                            CountryId = 2,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(2004),
                            IsDeleted = false,
                            ProvinceName = "Arizona"
                        },
                        new
                        {
                            ProvinceId = 37,
                            CountryId = 2,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(2005),
                            IsDeleted = false,
                            ProvinceName = "Arkansas"
                        },
                        new
                        {
                            ProvinceId = 38,
                            CountryId = 2,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(2006),
                            IsDeleted = false,
                            ProvinceName = "California"
                        },
                        new
                        {
                            ProvinceId = 39,
                            CountryId = 2,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(2009),
                            IsDeleted = false,
                            ProvinceName = "Colorado"
                        },
                        new
                        {
                            ProvinceId = 40,
                            CountryId = 2,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(2011),
                            IsDeleted = false,
                            ProvinceName = "Connecticut"
                        },
                        new
                        {
                            ProvinceId = 41,
                            CountryId = 2,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(2012),
                            IsDeleted = false,
                            ProvinceName = "Delaware"
                        },
                        new
                        {
                            ProvinceId = 42,
                            CountryId = 2,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(2013),
                            IsDeleted = false,
                            ProvinceName = "Florida"
                        },
                        new
                        {
                            ProvinceId = 43,
                            CountryId = 2,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(2015),
                            IsDeleted = false,
                            ProvinceName = "Georgia"
                        },
                        new
                        {
                            ProvinceId = 44,
                            CountryId = 2,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(2017),
                            IsDeleted = false,
                            ProvinceName = "Hawaii"
                        },
                        new
                        {
                            ProvinceId = 45,
                            CountryId = 2,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(2018),
                            IsDeleted = false,
                            ProvinceName = "Idaho"
                        },
                        new
                        {
                            ProvinceId = 46,
                            CountryId = 2,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(2019),
                            IsDeleted = false,
                            ProvinceName = "Illinois"
                        },
                        new
                        {
                            ProvinceId = 47,
                            CountryId = 2,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(2020),
                            IsDeleted = false,
                            ProvinceName = "Indiana"
                        },
                        new
                        {
                            ProvinceId = 48,
                            CountryId = 2,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(2021),
                            IsDeleted = false,
                            ProvinceName = "Iowa"
                        },
                        new
                        {
                            ProvinceId = 49,
                            CountryId = 2,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(2022),
                            IsDeleted = false,
                            ProvinceName = "Kansas"
                        },
                        new
                        {
                            ProvinceId = 50,
                            CountryId = 2,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(2040),
                            IsDeleted = false,
                            ProvinceName = "Kentucky"
                        },
                        new
                        {
                            ProvinceId = 51,
                            CountryId = 2,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(2041),
                            IsDeleted = false,
                            ProvinceName = "Louisiana"
                        },
                        new
                        {
                            ProvinceId = 52,
                            CountryId = 2,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(2042),
                            IsDeleted = false,
                            ProvinceName = "Maine"
                        },
                        new
                        {
                            ProvinceId = 53,
                            CountryId = 2,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(2043),
                            IsDeleted = false,
                            ProvinceName = "Maryland"
                        },
                        new
                        {
                            ProvinceId = 54,
                            CountryId = 2,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(2044),
                            IsDeleted = false,
                            ProvinceName = "Massachusetts"
                        },
                        new
                        {
                            ProvinceId = 55,
                            CountryId = 2,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(2045),
                            IsDeleted = false,
                            ProvinceName = "Michigan"
                        },
                        new
                        {
                            ProvinceId = 56,
                            CountryId = 2,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(2046),
                            IsDeleted = false,
                            ProvinceName = "Minnesota"
                        },
                        new
                        {
                            ProvinceId = 57,
                            CountryId = 2,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(2046),
                            IsDeleted = false,
                            ProvinceName = "Mississippi"
                        },
                        new
                        {
                            ProvinceId = 58,
                            CountryId = 2,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(2048),
                            IsDeleted = false,
                            ProvinceName = "Missouri"
                        },
                        new
                        {
                            ProvinceId = 59,
                            CountryId = 2,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(2049),
                            IsDeleted = false,
                            ProvinceName = "Montana"
                        },
                        new
                        {
                            ProvinceId = 60,
                            CountryId = 2,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(2050),
                            IsDeleted = false,
                            ProvinceName = "Nebraska"
                        },
                        new
                        {
                            ProvinceId = 61,
                            CountryId = 2,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(2051),
                            IsDeleted = false,
                            ProvinceName = "Nevada"
                        },
                        new
                        {
                            ProvinceId = 62,
                            CountryId = 2,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(2053),
                            IsDeleted = false,
                            ProvinceName = "New Hampshire"
                        },
                        new
                        {
                            ProvinceId = 63,
                            CountryId = 2,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(2054),
                            IsDeleted = false,
                            ProvinceName = "New Jersey"
                        },
                        new
                        {
                            ProvinceId = 64,
                            CountryId = 2,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(2054),
                            IsDeleted = false,
                            ProvinceName = "New Mexico"
                        },
                        new
                        {
                            ProvinceId = 65,
                            CountryId = 2,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(2059),
                            IsDeleted = false,
                            ProvinceName = "New York"
                        },
                        new
                        {
                            ProvinceId = 66,
                            CountryId = 2,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(2061),
                            IsDeleted = false,
                            ProvinceName = "North Carolina"
                        },
                        new
                        {
                            ProvinceId = 67,
                            CountryId = 2,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(2063),
                            IsDeleted = false,
                            ProvinceName = "North Dakota"
                        },
                        new
                        {
                            ProvinceId = 68,
                            CountryId = 2,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(2064),
                            IsDeleted = false,
                            ProvinceName = "Ohio"
                        },
                        new
                        {
                            ProvinceId = 69,
                            CountryId = 2,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(2065),
                            IsDeleted = false,
                            ProvinceName = "Oklahoma"
                        },
                        new
                        {
                            ProvinceId = 70,
                            CountryId = 2,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(2066),
                            IsDeleted = false,
                            ProvinceName = "Oregon"
                        },
                        new
                        {
                            ProvinceId = 71,
                            CountryId = 2,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(2066),
                            IsDeleted = false,
                            ProvinceName = "Pennsylvania"
                        },
                        new
                        {
                            ProvinceId = 72,
                            CountryId = 2,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(2069),
                            IsDeleted = false,
                            ProvinceName = "Rhode Island"
                        },
                        new
                        {
                            ProvinceId = 73,
                            CountryId = 2,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(2070),
                            IsDeleted = false,
                            ProvinceName = "South Carolina"
                        },
                        new
                        {
                            ProvinceId = 74,
                            CountryId = 2,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(2072),
                            IsDeleted = false,
                            ProvinceName = "South Dakota"
                        },
                        new
                        {
                            ProvinceId = 75,
                            CountryId = 2,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(2074),
                            IsDeleted = false,
                            ProvinceName = "Tennessee"
                        },
                        new
                        {
                            ProvinceId = 76,
                            CountryId = 2,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(2076),
                            IsDeleted = false,
                            ProvinceName = "Texas"
                        },
                        new
                        {
                            ProvinceId = 77,
                            CountryId = 2,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(2077),
                            IsDeleted = false,
                            ProvinceName = "Utah"
                        },
                        new
                        {
                            ProvinceId = 78,
                            CountryId = 2,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(2079),
                            IsDeleted = false,
                            ProvinceName = "Vermont"
                        },
                        new
                        {
                            ProvinceId = 79,
                            CountryId = 2,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(2081),
                            IsDeleted = false,
                            ProvinceName = "Virginia"
                        },
                        new
                        {
                            ProvinceId = 80,
                            CountryId = 2,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(2083),
                            IsDeleted = false,
                            ProvinceName = "Washington"
                        },
                        new
                        {
                            ProvinceId = 81,
                            CountryId = 2,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(2085),
                            IsDeleted = false,
                            ProvinceName = "West Virginia"
                        },
                        new
                        {
                            ProvinceId = 82,
                            CountryId = 2,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(2087),
                            IsDeleted = false,
                            ProvinceName = "Wisconsin"
                        },
                        new
                        {
                            ProvinceId = 83,
                            CountryId = 2,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 955, DateTimeKind.Utc).AddTicks(2089),
                            IsDeleted = false,
                            ProvinceName = "Wyoming"
                        });
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.QualificationDetails", b =>
                {
                    b.Property<int>("QualificationId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("QualificationName")
                        .HasMaxLength(50);

                    b.HasKey("QualificationId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("QualificationDetails");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.RatingBasedCriteria", b =>
                {
                    b.Property<int>("RatingBasedCriteriaId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CriteriaQuestion");

                    b.Property<int>("InterviewDetailsId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("Rating");

                    b.HasKey("RatingBasedCriteriaId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("InterviewDetailsId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("RatingBasedCriteria");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.RolePermissions", b =>
                {
                    b.Property<int>("RolesPermissionId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("CanEdit");

                    b.Property<bool>("CanView");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("CurrentPermissionId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<bool>("IsGrant");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("ModuleId");

                    b.Property<int?>("PageId");

                    b.Property<string>("RoleId");

                    b.HasKey("RolesPermissionId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("PageId");

                    b.ToTable("RolePermissions");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Store.InventoryItemType", b =>
                {
                    b.Property<int>("ItemType")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("TypeName");

                    b.HasKey("ItemType");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("InventoryItemType");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Store.ItemPurchaseDocument", b =>
                {
                    b.Property<int>("DocumentId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("DocumentGuid");

                    b.Property<string>("DocumentName");

                    b.Property<byte[]>("File");

                    b.Property<string>("FileName");

                    b.Property<string>("FileType");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Purchase");

                    b.HasKey("DocumentId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("Purchase");

                    b.ToTable("ItemPurchaseDocuments");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Store.MotorFuel", b =>
                {
                    b.Property<string>("FuelId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<long>("FuelQuantity");

                    b.Property<int>("Generator");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Order");

                    b.Property<int>("Vehicle");

                    b.HasKey("FuelId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Generator");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("Order");

                    b.HasIndex("Vehicle");

                    b.ToTable("VehicleFuel");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Store.MotorMaintenance", b =>
                {
                    b.Property<string>("MaintenanceId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<int>("Generator");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Order");

                    b.Property<string>("StoreName")
                        .IsRequired();

                    b.Property<int>("Vehicle");

                    b.HasKey("MaintenanceId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Generator");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("Order");

                    b.HasIndex("Vehicle");

                    b.ToTable("MotorMaintenances");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Store.MotorSparePart", b =>
                {
                    b.Property<string>("PartId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int>("Generator");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Order");

                    b.Property<string>("PartDescription");

                    b.Property<string>("PartName");

                    b.Property<bool>("PartUsed");

                    b.Property<int>("Vehicle");

                    b.HasKey("PartId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Generator");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("Order");

                    b.HasIndex("Vehicle");

                    b.ToTable("MotorSpareParts");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Store.PaymentTypes", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("ChartOfAccountNewId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Name");

                    b.HasKey("PaymentId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("PaymentTypes");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Store.PurchaseGenerator", b =>
                {
                    b.Property<int>("GeneratorId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("GeneratorBrand");

                    b.Property<string>("GeneratorModel");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("MakeYear");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Purchase")
                        .IsRequired();

                    b.Property<string>("SerialBarCode");

                    b.HasKey("GeneratorId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("Purchase");

                    b.ToTable("PurchaseGenerators");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Store.PurchaseUnitType", b =>
                {
                    b.Property<int>("UnitTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("UnitTypeName");

                    b.HasKey("UnitTypeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("PurchaseUnitType");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Store.PurchaseVehicle", b =>
                {
                    b.Property<int>("VehicleId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Purchase");

                    b.Property<string>("VehicleBrand");

                    b.Property<string>("VehicleDescription");

                    b.Property<string>("VehicleImageFileName");

                    b.Property<string>("VehicleImageFileType");

                    b.Property<string>("VehicleImageName");

                    b.Property<string>("VehicleMakeYear");

                    b.Property<string>("VehicleModel");

                    b.Property<string>("VehiclePlate");

                    b.Property<string>("VehicleSerialNo");

                    b.HasKey("VehicleId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("Purchase");

                    b.ToTable("PurchaseVehicles");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Store.ReceiptType", b =>
                {
                    b.Property<int>("ReceiptTypeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("ReceiptTypeName");

                    b.HasKey("ReceiptTypeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("ReceiptType");

                    b.HasData(
                        new
                        {
                            ReceiptTypeId = 1,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 954, DateTimeKind.Utc).AddTicks(2952),
                            IsDeleted = false,
                            ReceiptTypeName = "Purchased"
                        },
                        new
                        {
                            ReceiptTypeId = 2,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 954, DateTimeKind.Utc).AddTicks(3302),
                            IsDeleted = false,
                            ReceiptTypeName = "Transfers"
                        },
                        new
                        {
                            ReceiptTypeId = 3,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 954, DateTimeKind.Utc).AddTicks(3308),
                            IsDeleted = false,
                            ReceiptTypeName = "Donation"
                        },
                        new
                        {
                            ReceiptTypeId = 4,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 954, DateTimeKind.Utc).AddTicks(3310),
                            IsDeleted = false,
                            ReceiptTypeName = "Take Over"
                        },
                        new
                        {
                            ReceiptTypeId = 5,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 954, DateTimeKind.Utc).AddTicks(3310),
                            IsDeleted = false,
                            ReceiptTypeName = "Loan"
                        },
                        new
                        {
                            ReceiptTypeId = 6,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 954, DateTimeKind.Utc).AddTicks(3311),
                            IsDeleted = false,
                            ReceiptTypeName = "Return"
                        },
                        new
                        {
                            ReceiptTypeId = 7,
                            CreatedDate = new DateTime(2019, 8, 9, 13, 14, 11, 954, DateTimeKind.Utc).AddTicks(3312),
                            IsDeleted = false,
                            ReceiptTypeName = "Other"
                        });
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Store.StatusAtTimeOfIssue", b =>
                {
                    b.Property<int>("StatusAtTimeOfIssueId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("StatusName");

                    b.HasKey("StatusAtTimeOfIssueId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("StatusAtTimeOfIssue");

                    b.HasData(
                        new
                        {
                            StatusAtTimeOfIssueId = 1,
                            IsDeleted = false,
                            StatusName = "New"
                        },
                        new
                        {
                            StatusAtTimeOfIssueId = 2,
                            IsDeleted = false,
                            StatusName = "Useable"
                        },
                        new
                        {
                            StatusAtTimeOfIssueId = 3,
                            IsDeleted = false,
                            StatusName = "To Repair"
                        },
                        new
                        {
                            StatusAtTimeOfIssueId = 4,
                            IsDeleted = false,
                            StatusName = "Damage"
                        },
                        new
                        {
                            StatusAtTimeOfIssueId = 5,
                            IsDeleted = false,
                            StatusName = "Sold"
                        },
                        new
                        {
                            StatusAtTimeOfIssueId = 6,
                            IsDeleted = false,
                            StatusName = "Stolen"
                        },
                        new
                        {
                            StatusAtTimeOfIssueId = 7,
                            IsDeleted = false,
                            StatusName = "Handover"
                        },
                        new
                        {
                            StatusAtTimeOfIssueId = 8,
                            IsDeleted = false,
                            StatusName = "Demolished"
                        },
                        new
                        {
                            StatusAtTimeOfIssueId = 9,
                            IsDeleted = false,
                            StatusName = "Broken"
                        });
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Store.StoreInventory", b =>
                {
                    b.Property<string>("InventoryId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AssetType");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("InventoryCode");

                    b.Property<long?>("InventoryCreditAccount");

                    b.Property<long>("InventoryDebitAccount");

                    b.Property<string>("InventoryDescription");

                    b.Property<string>("InventoryName");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("InventoryId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("InventoryCreditAccount");

                    b.HasIndex("InventoryDebitAccount");

                    b.HasIndex("ModifiedById");

                    b.ToTable("StoreInventories");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Store.StoreInventoryItem", b =>
                {
                    b.Property<string>("ItemId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ItemCode");

                    b.Property<long?>("ItemGroupId");

                    b.Property<string>("ItemInventory");

                    b.Property<string>("ItemName");

                    b.Property<int>("ItemType");

                    b.Property<string>("MasterInventoryCode");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("ItemId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ItemGroupId");

                    b.HasIndex("ItemInventory");

                    b.HasIndex("ItemType");

                    b.HasIndex("ModifiedById");

                    b.ToTable("InventoryItems");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Store.StoreItemGroup", b =>
                {
                    b.Property<long>("ItemGroupId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<string>("InventoryId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ItemGroupCode");

                    b.Property<string>("ItemGroupName");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.HasKey("ItemGroupId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("InventoryId");

                    b.HasIndex("ModifiedById");

                    b.ToTable("StoreItemGroups");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Store.StoreItemPurchase", b =>
                {
                    b.Property<string>("PurchaseId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("ApplyDepreciation");

                    b.Property<int?>("AssetTypeId");

                    b.Property<long?>("BudgetLineId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int>("Currency");

                    b.Property<DateTime>("DeliveryDate");

                    b.Property<double>("DepreciationRate");

                    b.Property<string>("ImageFileName");

                    b.Property<string>("ImageFileType");

                    b.Property<string>("InventoryItem")
                        .IsRequired();

                    b.Property<DateTime?>("InvoiceDate");

                    b.Property<string>("InvoiceFileName");

                    b.Property<string>("InvoiceFileType");

                    b.Property<string>("InvoiceNo");

                    b.Property<bool?>("IsDeleted");

                    b.Property<bool>("IsPurchaseVerified");

                    b.Property<int?>("JournalCode");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int?>("OfficeId");

                    b.Property<int?>("PaymentTypeId");

                    b.Property<long?>("ProjectId");

                    b.Property<DateTime>("PurchaseDate");

                    b.Property<int>("PurchasedById");

                    b.Property<int>("Quantity");

                    b.Property<int?>("ReceiptTypeId");

                    b.Property<string>("ReceivedFromLocation");

                    b.Property<string>("SerialNo")
                        .IsRequired();

                    b.Property<int?>("Status");

                    b.Property<long>("UnitCost");

                    b.Property<int>("UnitType");

                    b.Property<long?>("VerifiedPurchaseVoucher");

                    b.Property<DateTime>("VoucherDate");

                    b.Property<long?>("VoucherId");

                    b.HasKey("PurchaseId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("Currency");

                    b.HasIndex("InventoryItem");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.HasIndex("PurchasedById");

                    b.HasIndex("ReceiptTypeId");

                    b.HasIndex("Status");

                    b.HasIndex("UnitType");

                    b.HasIndex("VoucherId");

                    b.ToTable("StoreItemPurchases");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Store.StorePurchaseOrder", b =>
                {
                    b.Property<string>("OrderId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("InventoryItem");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("IssedToLocation");

                    b.Property<DateTime>("IssueDate");

                    b.Property<string>("IssueVoucherNo");

                    b.Property<int>("IssuedQuantity");

                    b.Property<int>("IssuedToEmployeeId");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<bool>("MustReturn");

                    b.Property<long>("Project");

                    b.Property<string>("Purchase");

                    b.Property<string>("Remarks");

                    b.Property<bool>("Returned");

                    b.Property<DateTime?>("ReturnedDate");

                    b.Property<int>("StatusAtTimeOfIssue");

                    b.HasKey("OrderId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("InventoryItem");

                    b.HasIndex("IssuedToEmployeeId");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("Purchase");

                    b.ToTable("StorePurchaseOrders");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Store.StoreSourceCodeDetail", b =>
                {
                    b.Property<long>("SourceCodeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .HasMaxLength(200);

                    b.Property<string>("Code");

                    b.Property<int>("CodeTypeId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Description")
                        .HasMaxLength(100);

                    b.Property<string>("EmailAddress")
                        .HasMaxLength(100);

                    b.Property<string>("Fax")
                        .HasMaxLength(50);

                    b.Property<string>("Guarantor")
                        .HasMaxLength(50);

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Phone")
                        .HasMaxLength(50);

                    b.HasKey("SourceCodeId");

                    b.HasIndex("CodeTypeId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("StoreSourceCodeDetail");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.StrongandWeakPoints", b =>
                {
                    b.Property<int>("StrongPointsId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<DateTime>("CurrentAppraisalDate");

                    b.Property<int>("EmployeeAppraisalDetailsId");

                    b.Property<int>("EmployeeId");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Point");

                    b.Property<int>("Status");

                    b.HasKey("StrongPointsId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("StrongandWeakPoints");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.TaskMaster", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<string>("Description");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("Priority")
                        .HasMaxLength(20);

                    b.Property<long?>("ProjectId");

                    b.Property<string>("Status")
                        .HasMaxLength(50);

                    b.Property<string>("TaskName");

                    b.HasKey("TaskId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.HasIndex("ProjectId");

                    b.ToTable("TaskMaster");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.UserDetailOffices", b =>
                {
                    b.Property<int>("UserOfficesId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<int>("OfficeId");

                    b.Property<int>("UserId");

                    b.HasKey("UserOfficesId");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("UserDetailOffices");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.UserDetails", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AspNetUserId");

                    b.Property<string>("CreatedById");

                    b.Property<DateTime?>("CreatedDate");

                    b.Property<int>("DepartmentId");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50);

                    b.Property<bool?>("IsDeleted");

                    b.Property<string>("LastName")
                        .HasMaxLength(50);

                    b.Property<string>("ModifiedById");

                    b.Property<DateTime?>("ModifiedDate");

                    b.Property<string>("OfficeCode")
                        .HasMaxLength(10);

                    b.Property<int?>("OfficeId");

                    b.Property<string>("Password")
                        .HasMaxLength(50);

                    b.Property<byte?>("Status");

                    b.Property<byte?>("UserType");

                    b.Property<string>("Username")
                        .HasMaxLength(50);

                    b.HasKey("UserID");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ModifiedById");

                    b.ToTable("UserDetails");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Accounting.AccountFilterType", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Accounting.AccountHeadType", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Accounting.AccountLevel", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Accounting.AccountType", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.Accounting.AccountHeadType", "AccountHeadType")
                        .WithMany()
                        .HasForeignKey("AccountHeadTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Accounting.ChartOfAccountNew", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.Accounting.AccountFilterType", "AccountFilterType")
                        .WithMany()
                        .HasForeignKey("AccountFilterTypeId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Accounting.AccountLevel", "AccountLevels")
                        .WithMany()
                        .HasForeignKey("AccountLevelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Accounting.AccountType", "AccountType")
                        .WithMany()
                        .HasForeignKey("AccountTypeId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Accounting.ExchangeRate", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.CurrencyDetails", "CurrencyFrom")
                        .WithMany()
                        .HasForeignKey("FromCurrency");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.OfficeDetail", "OfficeDetail")
                        .WithMany()
                        .HasForeignKey("OfficeId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.CurrencyDetails", "CurrencyTo")
                        .WithMany()
                        .HasForeignKey("ToCurrency");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Accounting.ExchangeRateDetail", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Accounting.ExchangeRateVerification", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Accounting.VoucherDetail", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.ProjectBudgetLineDetail", "ProjectBudgetLineDetail")
                        .WithMany()
                        .HasForeignKey("BudgetLineId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.CurrencyDetails", "CurrencyDetail")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.FinancialYearDetail", "FinancialYearDetails")
                        .WithMany()
                        .HasForeignKey("FinancialYearId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.JournalDetail", "JournalDetails")
                        .WithMany("VoucherDetails")
                        .HasForeignKey("JournalCode");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.OfficeDetail", "OfficeDetails")
                        .WithMany()
                        .HasForeignKey("OfficeId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.ProjectDetail", "ProjectDetail")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Accounting.VoucherType", "VoucherTypes")
                        .WithMany()
                        .HasForeignKey("VoucherTypeId");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Accounting.VoucherDocumentDetail", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.DocumentFileDetail", "DocumentFileDetail")
                        .WithMany()
                        .HasForeignKey("DocumentFileId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Accounting.VoucherDetail", "VoucherDetails")
                        .WithMany()
                        .HasForeignKey("VoucherNo")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Accounting.VoucherTransactions", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.ProjectBudgetLineDetail", "ProjectBudgetLineDetail")
                        .WithMany("VoucherTransactions")
                        .HasForeignKey("BudgetLineId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Accounting.ChartOfAccountNew", "ChartOfAccountDetail")
                        .WithMany("VoucherTransactionsList")
                        .HasForeignKey("ChartOfAccountNewId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.CurrencyDetails", "CurrencyDetails")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.ProjectJobDetail", "ProjectJobDetail")
                        .WithMany()
                        .HasForeignKey("JobId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.OfficeDetail", "OfficeDetails")
                        .WithMany()
                        .HasForeignKey("OfficeId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.ProjectDetail", "ProjectDetail")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Accounting.VoucherDetail", "VoucherDetails")
                        .WithMany("VoucherTransactionDetails")
                        .HasForeignKey("VoucherNo");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Accounting.VoucherType", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.ActivityMaster", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.TaskMaster", "TaskMaster")
                        .WithMany("ActivityMaster")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.AgreeDisagreePermission", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.ApplicationPages", "ApplicationPages")
                        .WithMany()
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.ApplicationPages", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.ApproveRejectPermission", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.ApplicationPages", "ApplicationPages")
                        .WithMany()
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.AssignActivity", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.ActivityMaster", "ActivityMaster")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.ProjectDetails", "ProjectDetails")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.TaskMaster", "TaskMaster")
                        .WithMany()
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.AssignActivityApproveBy", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ApprovedBy")
                        .WithMany()
                        .HasForeignKey("ApprovedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AssignActivity", "AssignActivity")
                        .WithMany()
                        .HasForeignKey("AssignActivityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.AssignActivityFeedback", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AssignActivity", "AssignActivity")
                        .WithMany()
                        .HasForeignKey("AssignActivityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.BudgetLineType", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.BudgetReceivable", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.ProjectBudgetLine", "ProjectBudgetLine")
                        .WithMany()
                        .HasForeignKey("BudgetLineId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.ProjectDetails", "ProjectDetails")
                        .WithMany()
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.BudgetReceivedAmount", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.BudgetReceivable", "BudgetReceivable")
                        .WithMany()
                        .HasForeignKey("BudgetReceivalbeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.CodeType", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.ContractTypeContent", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.HR.EmployeeContractType", "EmployeeContractType")
                        .WithMany()
                        .HasForeignKey("EmployeeContractTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.CountryDetails", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.CurrencyDetails", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Department", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.OfficeDetail", "OfficeDetails")
                        .WithMany()
                        .HasForeignKey("OfficeId");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.DesignationDetail", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.DistrictDetail", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.DocumentFileDetail", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.DonorDetail", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.EmailSettingDetail", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.EmailType", "EmailTypes")
                        .WithMany()
                        .HasForeignKey("EmailTypeId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.EmailType", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.ErrorLog.Errorlog", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.FinancialYearDetail", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.GainLossSelectedAccounts", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.Accounting.ChartOfAccountNew", "ChartOfAccountNew")
                        .WithMany()
                        .HasForeignKey("ChartOfAccountNewId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.Advances", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.CurrencyDetails", "CurrencyDetails")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.HR.EmployeeDetail", "EmployeeDetail")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.AnalyticalDetail", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.AppraisalGeneralQuestions", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.AssignLeaveToEmployee", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.HR.EmployeeDetail", "EmployeeDetails")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.FinancialYearDetail", "FinancialYearDetails")
                        .WithMany()
                        .HasForeignKey("FinancialYearId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.LeaveReasonDetail", "LeaveReasonDetails")
                        .WithMany()
                        .HasForeignKey("LeaveReasonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.AttendanceGroupMaster", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.EmployeeAnalyticalDetail", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.EmployeeApplyLeave", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.HR.EmployeeDetail", "EmployeeDetails")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.FinancialYearDetail", "FinancialYearDetail")
                        .WithMany()
                        .HasForeignKey("FinancialYearId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.LeaveReasonDetail", "LeaveReasonDetails")
                        .WithMany()
                        .HasForeignKey("LeaveReasonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.EmployeeAppraisalDetails", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.HR.EmployeeDetail", "EmployeeDetail")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.EmployeeAppraisalQuestions", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.HR.AppraisalGeneralQuestions", "AppraisalGeneralQuestions")
                        .WithMany()
                        .HasForeignKey("AppraisalGeneralQuestionsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.EmployeeAppraisalTeamMember", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.EmployeeAttendance", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.HR.EmployeeDetail", "EmployeeDetails")
                        .WithMany("EmployeeAttendance")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.FinancialYearDetail", "FinancialYearDetail")
                        .WithMany()
                        .HasForeignKey("FinancialYearId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.HR.HolidayDetails", "HolidayDetails")
                        .WithMany()
                        .HasForeignKey("HolidayId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.LeaveReasonDetail", "LeaveReasonDetail")
                        .WithMany()
                        .HasForeignKey("LeaveReasonId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.EmployeeContract", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.HR.EmployeeDetail", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.JobGrade", "JobGrade")
                        .WithMany()
                        .HasForeignKey("Grade");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.EmployeeDetail", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.CountryDetails", "CountryDetails")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.HR.EmployeeType", "EmployeeType")
                        .WithMany()
                        .HasForeignKey("EmployeeTypeId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.QualificationDetails", "QualificationDetails")
                        .WithMany()
                        .HasForeignKey("HigherQualificationId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.NationalityDetails", "NationalityDetails")
                        .WithMany()
                        .HasForeignKey("NationalityId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.ProvinceDetails", "ProvinceDetails")
                        .WithMany()
                        .HasForeignKey("ProvinceId");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.EmployeeDocumentDetail", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.HR.EmployeeDetail", "EmployeeDetail")
                        .WithMany()
                        .HasForeignKey("EmployeeID");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.EmployeeEducations", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.HR.EmployeeDetail", "EmployeeDetail")
                        .WithMany()
                        .HasForeignKey("EmployeeID");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.EmployeeEvaluation", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.EmployeeEvaluationTraining", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.EmployeeHealthInfo", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.HR.EmployeeDetail", "EmployeeDetails")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.EmployeeHealthQuestion", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.EmployeeHistoryDetail", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.HR.EmployeeDetail", "EmployeeDetail")
                        .WithMany()
                        .HasForeignKey("EmployeeID");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.EmployeeHistoryOutsideCountry", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.HR.EmployeeDetail", "EmployeeDetail")
                        .WithMany()
                        .HasForeignKey("EmployeeID");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.EmployeeHistoryOutsideOrganization", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.HR.EmployeeDetail", "EmployeeDetail")
                        .WithMany()
                        .HasForeignKey("EmployeeID");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.EmployeeInfoReferences", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.HR.EmployeeDetail", "EmployeeDetail")
                        .WithMany()
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.EmployeeLanguages", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.LanguageDetail", "LanguageDetail")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.EmployeeMonthlyAttendance", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.HR.Advances", "Advance")
                        .WithMany()
                        .HasForeignKey("AdvanceId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.HR.EmployeeDetail", "EmployeeDetails")
                        .WithMany()
                        .HasForeignKey("EmployeeId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.EmployeeMonthlyPayroll", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.CurrencyDetails", "CurrencyDetails")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.HR.EmployeeDetail", "EmployeeDetails")
                        .WithMany()
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.HR.SalaryHeadDetails", "SalaryHeadDetails")
                        .WithMany()
                        .HasForeignKey("SalaryHeadId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.EmployeeOtherSkills", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.HR.EmployeeDetail", "EmployeeDetail")
                        .WithMany()
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.EmployeePaymentTypes", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.HR.Advances", "AdvanceDetail")
                        .WithMany()
                        .HasForeignKey("AdvanceId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.HR.EmployeeDetail", "EmployeeDetail")
                        .WithMany()
                        .HasForeignKey("EmployeeID");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.EmployeePayroll", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.CurrencyDetails", "CurrencyDetails")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.HR.EmployeeDetail", "EmployeeDetails")
                        .WithMany("EmployeePayrollList")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.HR.SalaryHeadDetails", "SalaryHeadDetails")
                        .WithMany()
                        .HasForeignKey("SalaryHeadId");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.EmployeePayrollAccountHead", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.HR.EmployeeDetail", "EmployeeDetail")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.HR.PayrollAccountHead", "PayrollAccountHead")
                        .WithMany()
                        .HasForeignKey("PayrollHeadId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.EmployeePayrollForMonth", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.HR.EmployeeDetail", "EmployeeDetail")
                        .WithMany()
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.EmployeePayrollMonth", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.CurrencyDetails", "CurrencyDetails")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.HR.EmployeeDetail", "EmployeeDetails")
                        .WithMany()
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.HR.SalaryHeadDetails", "SalaryHeadDetails")
                        .WithMany()
                        .HasForeignKey("SalaryHeadId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.EmployeePensionRate", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.FinancialYearDetail", "FinancialYearDetail")
                        .WithMany()
                        .HasForeignKey("FinancialYearId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.EmployeeProfessionalDetail", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.HR.AttendanceGroupMaster", "AttendanceGroupMaster")
                        .WithMany()
                        .HasForeignKey("AttendanceGroupId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.DesignationDetail", "DesignationDetails")
                        .WithMany()
                        .HasForeignKey("DesignationId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.HR.EmployeeContractType", "EmployeeContractType")
                        .WithMany()
                        .HasForeignKey("EmployeeContractTypeId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.HR.EmployeeDetail")
                        .WithOne("EmployeeProfessionalDetail")
                        .HasForeignKey("HumanitarianAssistance.Domain.Entities.HR.EmployeeProfessionalDetail", "EmployeeId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.HR.EmployeeType", "EmployeeType")
                        .WithMany()
                        .HasForeignKey("EmployeeTypeId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.OfficeDetail", "OfficeDetail")
                        .WithMany()
                        .HasForeignKey("OfficeId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.ProfessionDetails", "professionDetails")
                        .WithMany()
                        .HasForeignKey("ProfessionId");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.EmployeeRelativeInfo", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.HR.EmployeeDetail", "EmployeeDetail")
                        .WithMany()
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.EmployeeSalaryAnalyticalInfo", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.ProjectBudgetLineDetail", "ProjectBudgetLine")
                        .WithMany()
                        .HasForeignKey("BudgetlineId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.HR.EmployeeDetail", "EmployeeDetail")
                        .WithMany()
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.ProjectHiringRequestDetail", "ProjectHiringRequestDetail")
                        .WithMany()
                        .HasForeignKey("HiringRequestId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.ProjectDetail", "ProjectDetail")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.EmployeeSalaryBudget", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.HR.EmployeeDetail", "EmployeeDetail")
                        .WithMany()
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.EmployeeSalaryDetails", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.CurrencyDetails", "CurrencyDetails")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.HR.EmployeeDetail", "EmployeeDetails")
                        .WithOne("EmployeeSalaryDetails")
                        .HasForeignKey("HumanitarianAssistance.Domain.Entities.HR.EmployeeSalaryDetails", "EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.EmployeeSalaryPaymentHistory", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.HR.EmployeeDetail", "EmployeeDetail")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Accounting.VoucherDetail", "VoucherDetail")
                        .WithMany()
                        .HasForeignKey("VoucherNo")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.EmployeeType", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.ExistInterviewDetails", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.HR.EmployeeDetail", "EmployeeDetail")
                        .WithMany()
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.HRJobInterviewers", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.HR.EmployeeDetail", "EmployeeDetail")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.HR.InterviewDetails", "InterviewDetails")
                        .WithMany("HRJobInterviewersList")
                        .HasForeignKey("InterviewDetailsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.HolidayDetails", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.FinancialYearDetail", "FinancialYearDetail")
                        .WithMany()
                        .HasForeignKey("FinancialYearId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.OfficeDetail", "OfficeDetails")
                        .WithMany()
                        .HasForeignKey("OfficeId");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.HolidayWeeklyDetails", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.FinancialYearDetail", "FinancialYearDetails")
                        .WithMany()
                        .HasForeignKey("FinancialYearId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.OfficeDetail", "OfficeDetails")
                        .WithMany()
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.InterviewDetails", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.HR.EmployeeDetail", "EmployeeDetail")
                        .WithMany("InterviewDetails")
                        .HasForeignKey("EmployeeID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.InterviewLanguages", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.HR.InterviewDetails", "InterviewDetails")
                        .WithMany("InterviewLanguagesList")
                        .HasForeignKey("InterviewDetailsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.InterviewScheduleDetails", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.HR.EmployeeDetail", "EmployeeDetails")
                        .WithMany("InterviewScheduleDetails")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.JobGrade", "JobGrade")
                        .WithMany()
                        .HasForeignKey("GradeId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.JobHiringDetails", "JobHiringDetails")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.InterviewTechnicalQuestion", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.HR.InterviewDetails", "InterviewDetails")
                        .WithMany("InterviewTechnicalQuestionList")
                        .HasForeignKey("InterviewDetailsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.InterviewTechnicalQuestions", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.InterviewTrainings", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.HR.InterviewDetails", "InterviewDetails")
                        .WithMany("InterviewTrainingsList")
                        .HasForeignKey("InterviewDetailsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.PayrollAccountHead", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.PayrollMonthlyHourDetail", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.HR.AttendanceGroupMaster", "AttendanceGroupMaster")
                        .WithMany()
                        .HasForeignKey("AttendanceGroupId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.OfficeDetail", "OfficeDetails")
                        .WithMany()
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.SalaryHeadDetails", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.SalaryTaxReportContent", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.HR.TechnicalQuestion", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.ItemSpecificationDetails", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.ItemSpecificationMaster", "ItemSpecificationMaster")
                        .WithMany()
                        .HasForeignKey("ItemSpecificationMasterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.ItemSpecificationMaster", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Store.InventoryItemType", "InventoryItemType")
                        .WithMany()
                        .HasForeignKey("ItemTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.OfficeDetail", "OfficeDetail")
                        .WithMany()
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.JobGrade", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.JobHiringDetails", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.JobGrade", "JobGrade")
                        .WithMany()
                        .HasForeignKey("GradeId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.ProjectHiringRequestDetail", "ProjectHiringRequestDetail")
                        .WithOne("JobHiringDetails")
                        .HasForeignKey("HumanitarianAssistance.Domain.Entities.JobHiringDetails", "HiringRequestId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.OfficeDetail", "OfficeDetails")
                        .WithMany()
                        .HasForeignKey("OfficeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.JournalDetail", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.LanguageDetail", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.LeaveReasonDetail", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.LoggerDetails", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Marketing.ActivityType", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Marketing.Category", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Marketing.Channel", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Marketing.Medium", "Mediums")
                        .WithMany()
                        .HasForeignKey("MediumId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Marketing.ClientDetails", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.Marketing.Category", "Categories")
                        .WithMany()
                        .HasForeignKey("CategoryId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Marketing.ContractDetails", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.Marketing.ActivityType", "ActivityTypes")
                        .WithMany()
                        .HasForeignKey("ActivityTypeId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Marketing.ClientDetails", "ClientDetails")
                        .WithMany()
                        .HasForeignKey("ClientId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.CurrencyDetails", "CurrencyDetails")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.LanguageDetail", "LanguageDetail")
                        .WithMany()
                        .HasForeignKey("LanguageDetailLanguageId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Marketing.MediaCategory", "MediaCategories")
                        .WithMany()
                        .HasForeignKey("MediaCategoryId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Marketing.Medium", "Mediums")
                        .WithMany()
                        .HasForeignKey("MediumId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Marketing.Nature", "Natures")
                        .WithMany()
                        .HasForeignKey("NatureId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Marketing.Quality", "Qualities")
                        .WithMany()
                        .HasForeignKey("QualityId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Marketing.TimeCategory", "TimeCategories")
                        .WithMany()
                        .HasForeignKey("TimeCategoryId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Marketing.UnitRate", "UnitRates")
                        .WithMany()
                        .HasForeignKey("UnitRateId");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Marketing.InvoiceApproval", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Marketing.JobDetails", "JobDetails")
                        .WithMany()
                        .HasForeignKey("JobId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Marketing.InvoiceGeneration", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.CurrencyDetails", "CurrencyDetails")
                        .WithMany()
                        .HasForeignKey("CurrencyDetailsCurrencyId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Marketing.JobDetails", "JobDetails")
                        .WithMany()
                        .HasForeignKey("JobId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Marketing.JobDetails", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.Marketing.ContractDetails", "ContractDetails")
                        .WithMany()
                        .HasForeignKey("ContractId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Marketing.JobPhase", "JobPhases")
                        .WithMany()
                        .HasForeignKey("JobPhaseId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Marketing.JobPhase", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Marketing.JobPriceDetails", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Marketing.JobDetails", "JobDetails")
                        .WithMany()
                        .HasForeignKey("JobId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Marketing.Language", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Marketing.MediaCategory", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Marketing.Medium", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Marketing.Nature", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Marketing.PlayoutMinutes", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Marketing.ScheduleDetails", "ScheduleDetails")
                        .WithMany()
                        .HasForeignKey("ScheduleId");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Marketing.PolicyDaySchedule", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Marketing.PolicyDetail", "PolicyDetails")
                        .WithMany()
                        .HasForeignKey("PolicyId");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Marketing.PolicyDetail", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.LanguageDetail", "Languages")
                        .WithMany()
                        .HasForeignKey("LanguagesLanguageId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Marketing.MediaCategory", "MediaCategories")
                        .WithMany()
                        .HasForeignKey("MediaCategoryId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Marketing.Medium", "Mediums")
                        .WithMany()
                        .HasForeignKey("MediumId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Marketing.Producer", "Producers")
                        .WithMany()
                        .HasForeignKey("ProducerId");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Marketing.PolicyOrderSchedule", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Marketing.PolicyDetail", "PolicyDetails")
                        .WithMany()
                        .HasForeignKey("PolicyId");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Marketing.PolicySchedule", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Marketing.PolicyDetail", "PolicyDetails")
                        .WithMany()
                        .HasForeignKey("PolicyId");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Marketing.PolicyTimeSchedule", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Marketing.PolicyDetail", "PolicyDetails")
                        .WithMany()
                        .HasForeignKey("PolicyId");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Marketing.Producer", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Marketing.Quality", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Marketing.ScheduleDetails", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.Marketing.Channel", "Channel")
                        .WithMany()
                        .HasForeignKey("ChannelId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Marketing.JobDetails", "JobDetails")
                        .WithMany()
                        .HasForeignKey("JobId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Marketing.Medium", "Mediums")
                        .WithMany()
                        .HasForeignKey("MediumId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Marketing.PolicyDetail", "PolicyDetails")
                        .WithMany()
                        .HasForeignKey("PolicyId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.ProjectDetail", "ProjectDetail")
                        .WithMany()
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Marketing.TimeCategory", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Marketing.UnitRate", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.Marketing.ActivityType", "ActivityTypes")
                        .WithMany()
                        .HasForeignKey("ActivityTypeId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.CurrencyDetails", "CurrencyDetails")
                        .WithMany()
                        .HasForeignKey("CurrencyDetailsCurrencyId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Marketing.MediaCategory", "MediaCategories")
                        .WithMany()
                        .HasForeignKey("MediaCategoryId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Marketing.Medium", "Medium")
                        .WithMany()
                        .HasForeignKey("MediumId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Marketing.Nature", "Natures")
                        .WithMany()
                        .HasForeignKey("NatureId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Marketing.Quality", "Qualities")
                        .WithMany()
                        .HasForeignKey("QualityId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Marketing.TimeCategory", "TimeCategories")
                        .WithMany()
                        .HasForeignKey("TimeCategoryId");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.NationalityDetails", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.NotesMaster", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.Accounting.AccountType", "AccountType")
                        .WithMany()
                        .HasForeignKey("AccountTypeId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Accounting.ChartOfAccountNew", "ChartOfAccountNew")
                        .WithMany()
                        .HasForeignKey("ChartOfAccountNewId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.OfficeDetail", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.OrderSchedulePermission", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.ApplicationPages", "ApplicationPages")
                        .WithMany()
                        .HasForeignKey("PageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.PensionDebitAccountMaster", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.Accounting.ChartOfAccountNew", "ChartOfAccountNew")
                        .WithMany()
                        .HasForeignKey("ChartOfAccountNewId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.PensionPaymentHistory", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.HR.EmployeeDetail", "EmployeeDetail")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Accounting.VoucherDetail", "VoucherDetail")
                        .WithMany()
                        .HasForeignKey("VoucherNo")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Permissions", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.PermissionsInRoles", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.ProfessionDetails", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.ActivityDocumentsDetail", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.ProjectActivityDetail", "ProjectActivityDetail")
                        .WithMany()
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.ActivityStatusDetail", "ActivityStatusDetail")
                        .WithMany()
                        .HasForeignKey("StatusId");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.ActivityStatusDetail", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.ApproveProjectDetails", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.ProjectDetail", "ProjectDetail")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.AreaDetail", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.CEAgeGroupDetail", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.ProjectDetail", "ProjectDetail")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.CEAssumptionDetail", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.ProjectDetail", "ProjectDetail")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.CEFeasibilityExpertOtherDetail", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.ProjectDetail", "ProjectDetail")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.CEOccupationDetail", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.ProjectDetail", "ProjectDetail")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.CountryMultiSelectDetails", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.CountryDetails", "CountryDetails")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.ProjectDetail", "ProjectDetail")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.DistrictMultiSelect", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.DistrictDetail", "DistrictDetail")
                        .WithMany()
                        .HasForeignKey("DistrictID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.ProjectDetail", "ProjectDetail")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.ProvinceDetails", "ProvinceDetails")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.DonorCriteriaDetails", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.ProjectDetail", "ProjectDetail")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.DonorEligibilityCriteria", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.ProjectDetail", "ProjectDetail")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.EligibilityCriteriaDetail", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.ProjectDetail", "ProjectDetail")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.FeasibilityCriteriaDetail", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.ProjectDetail", "ProjectDetail")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.FinancialCriteriaDetail", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.ProjectDetail", "ProjectDetail")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.FinancialProjectDetail", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.ProjectDetail", "ProjectDetail")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.GenderConsiderationDetail", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.HiringRequestCandidates", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.HR.EmployeeDetail", "EmployeeDetail")
                        .WithMany()
                        .HasForeignKey("EmployeeID");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.ProjectHiringRequestDetail", "ProjectHiringRequestDetail")
                        .WithMany()
                        .HasForeignKey("HiringRequestId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.PriorityCriteriaDetail", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.ProjectDetail", "ProjectDetail")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.PriorityOtherDetail", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.ProjectDetail", "ProjectDetail")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.ProgramDetail", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.ProjectActivitiesControl", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.ProjectDetail", "ProjectDetail")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.UserDetails", "UserDetails")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.ProjectActivityDetail", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.ProjectBudgetLineDetail", "ProjectBudgetLineDetail")
                        .WithMany()
                        .HasForeignKey("BudgetLineId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.HR.EmployeeDetail", "EmployeeDetail")
                        .WithMany()
                        .HasForeignKey("EmployeeID");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.ProjectActivityDetail")
                        .WithMany("ProjectSubActivityList")
                        .HasForeignKey("ParentId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.ActivityStatusDetail", "ActivityStatusDetail")
                        .WithMany()
                        .HasForeignKey("StatusId");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.ProjectActivityExtensions", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.ProjectActivityDetail", "ProjectActivityDetail")
                        .WithMany("ProjectActivityExtensionList")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.ProjectActivityProvinceDetail", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.ProjectActivityDetail", "ProjectActivityDetail")
                        .WithMany("ProjectActivityProvinceDetail")
                        .HasForeignKey("ActivityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.DistrictDetail", "DistrictDetail")
                        .WithMany()
                        .HasForeignKey("DistrictID");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.ProvinceDetails", "ProvinceDetails")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.ProjectArea", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.AreaDetail", "AreaDetail")
                        .WithMany()
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.ProjectDetail", "ProjectDetail")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.ProjectAssignTo", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.HR.EmployeeDetail", "EmployeeDetail")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.ProjectDetail", "ProjectDetail")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.ProjectBudgetLine", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.BudgetLineType", "BudgetLineType")
                        .WithMany()
                        .HasForeignKey("BudgetLineTypeId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.ProjectDetails", "ProjectDetails")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.ProjectBudgetLineDetail", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.CurrencyDetails", "CurrencyDetails")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.ProjectDetail", "ProjectDetail")
                        .WithMany("ProjectBudgetLineDetails")
                        .HasForeignKey("ProjectId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.ProjectJobDetail", "ProjectJobDetail")
                        .WithMany()
                        .HasForeignKey("ProjectJobId");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.ProjectCommunication", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.ProjectDetail", "ProjectDetail")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.ProjectCommunicationAttachment", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.ProjectCommunication", "ProjectCommunication")
                        .WithMany()
                        .HasForeignKey("PCId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.ProjectDetail", "ProjectDetail")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.ProjectDetail", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.ProjectPhaseDetails", "ProjectPhaseDetails")
                        .WithMany()
                        .HasForeignKey("ProjectPhaseDetailsId");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.ProjectDetails", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.ProjectHiringControl", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.ProjectDetail", "ProjectDetail")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.UserDetails", "UserDetails")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.ProjectHiringRequestDetail", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.ProjectBudgetLineDetail", "ProjectBudgetLineDetail")
                        .WithMany()
                        .HasForeignKey("BudgetLineId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.CurrencyDetails", "CurrencyDetails")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.HR.EmployeeDetail", "EmployeeDetail")
                        .WithMany()
                        .HasForeignKey("EmployeeID");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.JobGrade", "JobGrade")
                        .WithMany()
                        .HasForeignKey("GradeId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.OfficeDetail", "OfficeDetails")
                        .WithMany()
                        .HasForeignKey("OfficeId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.ProfessionDetails", "ProfessionDetails")
                        .WithMany()
                        .HasForeignKey("ProfessionId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.ProjectDetail", "ProjectDetail")
                        .WithMany()
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.ProjectIndicatorQuestions", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.ProjectIndicators", "ProjectIndicators")
                        .WithMany("ProjectIndicatorQuestions")
                        .HasForeignKey("ProjectIndicatorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.ProjectIndicators", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.ProjectJobDetail", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.ProjectDetail", "ProjectDetail")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.ProjectLogisticsControl", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.ProjectDetail", "ProjectDetail")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.UserDetails", "UserDetails")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.ProjectMonitoringIndicatorDetail", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.ProjectIndicators", "ProjectIndicators")
                        .WithMany()
                        .HasForeignKey("ProjectIndicatorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.ProjectMonitoringReviewDetail")
                        .WithMany("ProjectMonitoringIndicatorDetail")
                        .HasForeignKey("ProjectMonitoringReviewId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.ProjectMonitoringIndicatorQuestions", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.ProjectMonitoringIndicatorDetail")
                        .WithMany("ProjectMonitoringIndicatorQuestions")
                        .HasForeignKey("MonitoringIndicatorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.ProjectIndicatorQuestions", "ProjectIndicatorQuestions")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.ProjectMonitoringReviewDetail", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.ProjectOpportunityControl", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.ProjectDetail", "ProjectDetail")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.UserDetails", "UserDetails")
                        .WithMany()
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.ProjectOtherDetail", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.ProjectDetail", "ProjectDetail")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.ProjectPhaseDetails", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.ProjectPhaseTime", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.ProjectDetail", "ProjectDetail")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.ProjectPhaseDetails", "ProjectPhaseDetails")
                        .WithMany()
                        .HasForeignKey("ProjectPhaseDetailsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.ProjectProgram", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.ProgramDetail", "ProgramDetail")
                        .WithMany()
                        .HasForeignKey("ProgramId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.ProjectDetail", "ProjectDetail")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.ProjectProposalDetail", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.ProjectDetail", "ProjectDetail")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.ProjectSector", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.ProjectDetail", "ProjectDetail")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.SectorDetails", "SectorDetails")
                        .WithMany()
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.ProvinceMultiSelect", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.CountryMultiSelectDetails", "CountryMultiSelectDetails")
                        .WithMany()
                        .HasForeignKey("CountryMultiSelectId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.ProjectDetail", "ProjectDetail")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.ProvinceDetails", "ProvinceDetails")
                        .WithMany()
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.PurposeofInitiativeCriteria", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.ProjectDetail", "ProjectDetail")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.RiskCriteriaDetail", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.CurrencyDetails", "CurrencyDetails")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.ProjectDetail", "ProjectDetail")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.SectorDetails", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.SecurityConsiderationDetail", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.SecurityConsiderationMultiSelect", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.ProjectDetail", "ProjectDetail")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.SecurityConsiderationDetail", "SecurityConsiderationDetail")
                        .WithMany()
                        .HasForeignKey("SecurityConsiderationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.SecurityDetail", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.StrengthConsiderationDetail", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.TargetBeneficiaryDetail", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Project.WinProjectDetails", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.ProjectDetail", "ProjectDetail")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.ProvinceDetails", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.CountryDetails", "CountryDetails")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.QualificationDetails", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.RatingBasedCriteria", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.HR.InterviewDetails", "InterviewDetails")
                        .WithMany("RatingBasedCriteriaList")
                        .HasForeignKey("InterviewDetailsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.RolePermissions", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.ApplicationPages", "ApplicationPages")
                        .WithMany()
                        .HasForeignKey("PageId");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Store.InventoryItemType", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Store.ItemPurchaseDocument", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Store.StoreItemPurchase", "ItemPurchase")
                        .WithMany()
                        .HasForeignKey("Purchase");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Store.MotorFuel", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Store.PurchaseGenerator", "PurchaseGenerator")
                        .WithMany()
                        .HasForeignKey("Generator")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Store.StorePurchaseOrder", "PurchaseOrder")
                        .WithMany()
                        .HasForeignKey("Order");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Store.PurchaseVehicle", "PurchaseVehicle")
                        .WithMany()
                        .HasForeignKey("Vehicle")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Store.MotorMaintenance", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Store.PurchaseGenerator", "PurchaseGenerator")
                        .WithMany()
                        .HasForeignKey("Generator")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Store.StorePurchaseOrder", "StorePurchaseOrder")
                        .WithMany()
                        .HasForeignKey("Order");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Store.PurchaseVehicle", "PurchaseVehicle")
                        .WithMany()
                        .HasForeignKey("Vehicle")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Store.MotorSparePart", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Store.PurchaseGenerator", "PurchaseGenerator")
                        .WithMany()
                        .HasForeignKey("Generator")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Store.StorePurchaseOrder", "StorePurchaseOrder")
                        .WithMany()
                        .HasForeignKey("Order");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Store.PurchaseVehicle", "PurchaseVehicle")
                        .WithMany()
                        .HasForeignKey("Vehicle")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Store.PaymentTypes", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Store.PurchaseGenerator", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Store.StoreItemPurchase", "ItemPurchase")
                        .WithMany()
                        .HasForeignKey("Purchase")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Store.PurchaseUnitType", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Store.PurchaseVehicle", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Store.StoreItemPurchase", "ItemPurchase")
                        .WithMany()
                        .HasForeignKey("Purchase");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Store.ReceiptType", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Store.StatusAtTimeOfIssue", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Store.StoreInventory", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Accounting.ChartOfAccountNew", "ChartCreditAccountDetails")
                        .WithMany()
                        .HasForeignKey("InventoryCreditAccount");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Accounting.ChartOfAccountNew", "ChartDebitAccountDetails")
                        .WithMany()
                        .HasForeignKey("InventoryDebitAccount")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Store.StoreInventoryItem", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Store.StoreItemGroup", "StoreItemGroup")
                        .WithMany()
                        .HasForeignKey("ItemGroupId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Store.StoreInventory", "Inventory")
                        .WithMany("InventoryItems")
                        .HasForeignKey("ItemInventory");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Store.InventoryItemType", "ItemTypes")
                        .WithMany()
                        .HasForeignKey("ItemType")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Store.StoreItemGroup", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Store.StoreInventory", "StoreInventory")
                        .WithMany()
                        .HasForeignKey("InventoryId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Store.StoreItemPurchase", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.CurrencyDetails", "CurrencyDetails")
                        .WithMany()
                        .HasForeignKey("Currency")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Store.StoreInventoryItem", "StoreInventoryItem")
                        .WithMany("StoreItemPurchases")
                        .HasForeignKey("InventoryItem")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.ProjectDetails", "ProjectDetails")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.HR.EmployeeDetail", "EmployeeDetail")
                        .WithMany()
                        .HasForeignKey("PurchasedById")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Store.ReceiptType", "ReceiptType")
                        .WithMany()
                        .HasForeignKey("ReceiptTypeId");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Store.StatusAtTimeOfIssue", "StatusAtTimeOfIssue")
                        .WithMany()
                        .HasForeignKey("Status");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Store.PurchaseUnitType", "PurchaseUnitType")
                        .WithMany()
                        .HasForeignKey("UnitType")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Accounting.VoucherDetail", "VoucherDetail")
                        .WithMany()
                        .HasForeignKey("VoucherId");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Store.StorePurchaseOrder", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Store.StoreInventoryItem", "StoreInventoryItem")
                        .WithMany()
                        .HasForeignKey("InventoryItem");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.HR.EmployeeDetail", "EmployeeDetail")
                        .WithMany()
                        .HasForeignKey("IssuedToEmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Store.StoreItemPurchase", "StoreItemPurchase")
                        .WithMany("PurchaseOrders")
                        .HasForeignKey("Purchase");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.Store.StoreSourceCodeDetail", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.CodeType", "CodeTypes")
                        .WithMany()
                        .HasForeignKey("CodeTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.StrongandWeakPoints", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.TaskMaster", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.Project.ProjectDetails", "ProjectDetailss")
                        .WithMany()
                        .HasForeignKey("ProjectId");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.UserDetailOffices", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("HumanitarianAssistance.Domain.Entities.UserDetails", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById");

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser", "ModifiedBy")
                        .WithMany()
                        .HasForeignKey("ModifiedById");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("HumanitarianAssistance.Domain.Entities.AppUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
